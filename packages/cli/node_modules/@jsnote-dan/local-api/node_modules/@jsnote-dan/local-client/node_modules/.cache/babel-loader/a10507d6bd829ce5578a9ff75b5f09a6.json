{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/Ryzen/Desktop/jbook/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar visit = require('unist-util-visit');\n\nvar nodeToString = require('hast-util-to-string');\n\nvar refractor = require('refractor');\n\nmodule.exports = function (options) {\n  options = options || {};\n\n  if (options.alias) {\n    refractor.alias(options.alias);\n  }\n\n  return function (tree) {\n    visit(tree, 'element', visitor);\n  };\n\n  function visitor(node, index, parent) {\n    if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n      return;\n    }\n\n    var lang = getLanguage(node);\n\n    if (lang === null) {\n      return;\n    }\n\n    var result;\n\n    try {\n      parent.properties.className = (parent.properties.className || []).concat('language-' + lang);\n      result = refractor.highlight(nodeToString(node), lang);\n    } catch (err) {\n      if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n        return;\n      }\n\n      throw err;\n    }\n\n    node.children = result;\n  }\n};\n\nfunction getLanguage(node) {\n  var className = node.properties.className || [];\n\n  var _iterator = _createForOfIteratorHelper(className),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var classListItem = _step.value;\n\n      if (classListItem.slice(0, 9) === 'language-') {\n        return classListItem.slice(9).toLowerCase();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/packages/local-client/node_modules/@mapbox/rehype-prism/index.js"],"names":["visit","require","nodeToString","refractor","module","exports","options","alias","tree","visitor","node","index","parent","tagName","lang","getLanguage","result","properties","className","concat","highlight","err","ignoreMissing","test","message","children","classListItem","slice","toLowerCase"],"mappings":"AAAA;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,qBAAD,CAA5B;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,OAAD,EAAa;AAC5BA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AAEA,MAAIA,OAAO,CAACC,KAAZ,EAAmB;AACjBJ,IAAAA,SAAS,CAACI,KAAV,CAAgBD,OAAO,CAACC,KAAxB;AACD;;AAED,SAAO,UAACC,IAAD,EAAU;AACfR,IAAAA,KAAK,CAACQ,IAAD,EAAO,SAAP,EAAkBC,OAAlB,CAAL;AACD,GAFD;;AAIA,WAASA,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsC;AACpC,QAAI,CAACA,MAAD,IAAWA,MAAM,CAACC,OAAP,KAAmB,KAA9B,IAAuCH,IAAI,CAACG,OAAL,KAAiB,MAA5D,EAAoE;AAClE;AACD;;AAED,QAAMC,IAAI,GAAGC,WAAW,CAACL,IAAD,CAAxB;;AAEA,QAAII,IAAI,KAAK,IAAb,EAAmB;AACjB;AACD;;AAED,QAAIE,MAAJ;;AACA,QAAI;AACFJ,MAAAA,MAAM,CAACK,UAAP,CAAkBC,SAAlB,GAA8B,CAACN,MAAM,CAACK,UAAP,CAAkBC,SAAlB,IAA+B,EAAhC,EAAoCC,MAApC,CAC5B,cAAcL,IADc,CAA9B;AAGAE,MAAAA,MAAM,GAAGb,SAAS,CAACiB,SAAV,CAAoBlB,YAAY,CAACQ,IAAD,CAAhC,EAAwCI,IAAxC,CAAT;AACD,KALD,CAKE,OAAOO,GAAP,EAAY;AACZ,UAAIf,OAAO,CAACgB,aAAR,IAAyB,mBAAmBC,IAAnB,CAAwBF,GAAG,CAACG,OAA5B,CAA7B,EAAmE;AACjE;AACD;;AACD,YAAMH,GAAN;AACD;;AAEDX,IAAAA,IAAI,CAACe,QAAL,GAAgBT,MAAhB;AACD;AACF,CArCD;;AAuCA,SAASD,WAAT,CAAqBL,IAArB,EAA2B;AACzB,MAAMQ,SAAS,GAAGR,IAAI,CAACO,UAAL,CAAgBC,SAAhB,IAA6B,EAA/C;;AADyB,6CAGGA,SAHH;AAAA;;AAAA;AAGzB,wDAAuC;AAAA,UAA5BQ,aAA4B;;AACrC,UAAIA,aAAa,CAACC,KAAd,CAAoB,CAApB,EAAuB,CAAvB,MAA8B,WAAlC,EAA+C;AAC7C,eAAOD,aAAa,CAACC,KAAd,CAAoB,CAApB,EAAuBC,WAAvB,EAAP;AACD;AACF;AAPwB;AAAA;AAAA;AAAA;AAAA;;AASzB,SAAO,IAAP;AACD","sourcesContent":["'use strict';\n\nconst visit = require('unist-util-visit');\nconst nodeToString = require('hast-util-to-string');\nconst refractor = require('refractor');\n\nmodule.exports = (options) => {\n  options = options || {};\n\n  if (options.alias) {\n    refractor.alias(options.alias);\n  }\n\n  return (tree) => {\n    visit(tree, 'element', visitor);\n  };\n\n  function visitor(node, index, parent) {\n    if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n      return;\n    }\n\n    const lang = getLanguage(node);\n\n    if (lang === null) {\n      return;\n    }\n\n    let result;\n    try {\n      parent.properties.className = (parent.properties.className || []).concat(\n        'language-' + lang\n      );\n      result = refractor.highlight(nodeToString(node), lang);\n    } catch (err) {\n      if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n        return;\n      }\n      throw err;\n    }\n\n    node.children = result;\n  }\n};\n\nfunction getLanguage(node) {\n  const className = node.properties.className || [];\n\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase();\n    }\n  }\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"script"}