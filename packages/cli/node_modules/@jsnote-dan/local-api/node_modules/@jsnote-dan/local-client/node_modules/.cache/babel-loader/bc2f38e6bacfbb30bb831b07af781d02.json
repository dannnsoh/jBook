{"ast":null,"code":"import * as esbuild from \"esbuild-wasm\";\nimport { unpkgPathPlugin } from \"../plugins/unpkg-path-plugin\";\nimport { fetchPlugin } from \"../plugins/fetch-plugin\"; // to check if esbuild has been initialized\n\nlet service = false;\nexport default (async rawCode => {\n  if (!service) {\n    // initialize esbuild\n    await esbuild.initialize({\n      worker: true,\n      wasmURL: \"https://unpkg.com/esbuild-wasm/esbuild.wasm\"\n    });\n    service = true;\n  } else {\n    // bundle code\n    const result = await esbuild.build({\n      entryPoints: [\"index.js\"],\n      bundle: true,\n      write: false,\n      plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n      define: {\n        \"process.env.NODE_ENV\": '\"production\"',\n        global: \"window\"\n      }\n    });\n    return result.outputFiles[0].text;\n  }\n});","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/Udemy/React and Typescript (Stephen Grider)/jbook/src/bundler/index.ts"],"names":["esbuild","unpkgPathPlugin","fetchPlugin","service","rawCode","initialize","worker","wasmURL","result","build","entryPoints","bundle","write","plugins","define","global","outputFiles","text"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,WAAT,QAA4B,yBAA5B,C,CAEA;;AACA,IAAIC,OAAgB,GAAG,KAAvB;AAEA,gBAAe,MAAOC,OAAP,IAA2B;AACzC,MAAI,CAACD,OAAL,EAAc;AACb;AACA,UAAMH,OAAO,CAACK,UAAR,CAAmB;AACxBC,MAAAA,MAAM,EAAE,IADgB;AAExBC,MAAAA,OAAO,EAAE;AAFe,KAAnB,CAAN;AAIAJ,IAAAA,OAAO,GAAG,IAAV;AACA,GAPD,MAOO;AACN;AACA,UAAMK,MAAM,GAAG,MAAMR,OAAO,CAACS,KAAR,CAAc;AAClCC,MAAAA,WAAW,EAAE,CAAE,UAAF,CADqB;AAElCC,MAAAA,MAAM,EAAE,IAF0B;AAGlCC,MAAAA,KAAK,EAAE,KAH2B;AAIlCC,MAAAA,OAAO,EAAE,CAAEZ,eAAe,EAAjB,EAAqBC,WAAW,CAACE,OAAD,CAAhC,CAJyB;AAKlCU,MAAAA,MAAM,EACL;AACC,gCAAwB,cADzB;AAECC,QAAAA,MAAM,EAAE;AAFT;AANiC,KAAd,CAArB;AAWA,WAAOP,MAAM,CAACQ,WAAP,CAAmB,CAAnB,EAAsBC,IAA7B;AACA;AACD,CAvBD","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\r\nimport { unpkgPathPlugin } from \"../plugins/unpkg-path-plugin\";\r\nimport { fetchPlugin } from \"../plugins/fetch-plugin\";\r\n\r\n// to check if esbuild has been initialized\r\nlet service: boolean = false;\r\n\r\nexport default async (rawCode: string) => {\r\n\tif (!service) {\r\n\t\t// initialize esbuild\r\n\t\tawait esbuild.initialize({\r\n\t\t\tworker: true,\r\n\t\t\twasmURL: \"https://unpkg.com/esbuild-wasm/esbuild.wasm\"\r\n\t\t});\r\n\t\tservice = true;\r\n\t} else {\r\n\t\t// bundle code\r\n\t\tconst result = await esbuild.build({\r\n\t\t\tentryPoints: [ \"index.js\" ],\r\n\t\t\tbundle: true,\r\n\t\t\twrite: false,\r\n\t\t\tplugins: [ unpkgPathPlugin(), fetchPlugin(rawCode) ],\r\n\t\t\tdefine:\r\n\t\t\t\t{\r\n\t\t\t\t\t\"process.env.NODE_ENV\": '\"production\"',\r\n\t\t\t\t\tglobal: \"window\"\r\n\t\t\t\t}\r\n\t\t});\r\n\t\treturn result.outputFiles[0].text;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}