{"ast":null,"code":"import _slicedToArray from \"C:/Users/Ryzen/Desktop/jbook/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"className\", \"value\", \"commands\", \"extraCommands\", \"height\", \"toolbarHeight\", \"enableScroll\", \"visiableDragbar\", \"highlightEnable\", \"preview\", \"fullscreen\", \"previewOptions\", \"textareaProps\", \"maxHeight\", \"minHeight\", \"autoFocus\", \"tabSize\", \"onChange\", \"hideToolbar\", \"renderTextarea\"];\nimport React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle } from 'react';\nimport MarkdownPreview from '@uiw/react-markdown-preview';\nimport TextArea from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands } from './commands';\nimport { reducer, EditorContext } from './Context';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction setGroupPopFalse(data) {\n  if (data === void 0) {\n    data = {};\n  }\n\n  Object.keys(data).forEach(function (keyname) {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nvar InternalMDEditor = function InternalMDEditor(props, ref) {\n  var _ref = props || {},\n      _ref$prefixCls = _ref.prefixCls,\n      prefixCls = _ref$prefixCls === void 0 ? 'w-md-editor' : _ref$prefixCls,\n      className = _ref.className,\n      propsValue = _ref.value,\n      _ref$commands = _ref.commands,\n      commands = _ref$commands === void 0 ? getCommands() : _ref$commands,\n      _ref$extraCommands = _ref.extraCommands,\n      extraCommands = _ref$extraCommands === void 0 ? getExtraCommands() : _ref$extraCommands,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 200 : _ref$height,\n      _ref$toolbarHeight = _ref.toolbarHeight,\n      toolbarHeight = _ref$toolbarHeight === void 0 ? 29 : _ref$toolbarHeight,\n      _ref$enableScroll = _ref.enableScroll,\n      enableScroll = _ref$enableScroll === void 0 ? true : _ref$enableScroll,\n      _ref$visiableDragbar = _ref.visiableDragbar,\n      visiableDragbar = _ref$visiableDragbar === void 0 ? true : _ref$visiableDragbar,\n      _ref$highlightEnable = _ref.highlightEnable,\n      highlightEnable = _ref$highlightEnable === void 0 ? true : _ref$highlightEnable,\n      _ref$preview = _ref.preview,\n      previewType = _ref$preview === void 0 ? 'live' : _ref$preview,\n      _ref$fullscreen = _ref.fullscreen,\n      fullscreen = _ref$fullscreen === void 0 ? false : _ref$fullscreen,\n      _ref$previewOptions = _ref.previewOptions,\n      previewOptions = _ref$previewOptions === void 0 ? {} : _ref$previewOptions,\n      textareaProps = _ref.textareaProps,\n      _ref$maxHeight = _ref.maxHeight,\n      maxHeight = _ref$maxHeight === void 0 ? 1200 : _ref$maxHeight,\n      _ref$minHeight = _ref.minHeight,\n      minHeight = _ref$minHeight === void 0 ? 100 : _ref$minHeight,\n      autoFocus = _ref.autoFocus,\n      _ref$tabSize = _ref.tabSize,\n      tabSize = _ref$tabSize === void 0 ? 2 : _ref$tabSize,\n      onChange = _ref.onChange,\n      hideToolbar = _ref.hideToolbar,\n      renderTextarea = _ref.renderTextarea,\n      other = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var _useReducer = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    height: height,\n    highlightEnable: highlightEnable,\n    tabSize: tabSize,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands: commands,\n    extraCommands: extraCommands,\n    fullscreen: fullscreen,\n    onChange: onChange,\n    barPopup: {}\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var container = useRef(null);\n  var previewRef = useRef(null);\n  var enableScrollRef = useRef(enableScroll);\n  useImperativeHandle(ref, function () {\n    return _extends({}, state);\n  });\n  useMemo(function () {\n    return enableScrollRef.current = enableScroll;\n  }, [enableScroll]);\n  useEffect(function () {\n    var stateInit = {};\n\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n\n    if (dispatch) {\n      dispatch(_extends({}, state, stateInit));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var cls = [className, prefixCls, state.preview ? prefixCls + \"-show-\" + state.preview : null, state.fullscreen ? prefixCls + \"-fullscreen\" : null].filter(Boolean).join(' ').trim();\n  useMemo(function () {\n    return propsValue !== state.markdown && dispatch({\n      markdown: propsValue || ''\n    });\n  }, [propsValue, state.markdown]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useMemo(function () {\n    return previewType !== state.preview && dispatch({\n      preview: previewType\n    });\n  }, [previewType]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useMemo(function () {\n    return height !== state.height && dispatch({\n      height: height\n    });\n  }, [height]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useMemo(function () {\n    return tabSize !== state.tabSize && dispatch({\n      tabSize: tabSize\n    });\n  }, [tabSize]);\n  useMemo(function () {\n    return highlightEnable !== state.highlightEnable && dispatch({\n      highlightEnable: highlightEnable\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [highlightEnable]); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  useMemo(function () {\n    return autoFocus !== state.autoFocus && dispatch({\n      autoFocus: autoFocus\n    });\n  }, [autoFocus]);\n  useMemo(function () {\n    return fullscreen !== state.fullscreen && dispatch({\n      fullscreen: fullscreen\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [fullscreen]);\n  var textareaDomRef = useRef();\n  var active = useRef('preview');\n  var initScroll = useRef(false);\n  useMemo(function () {\n    textareaDomRef.current = state.textareaWarp;\n\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', function () {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', function () {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  var handleScroll = function handleScroll(e, type) {\n    if (!enableScrollRef.current) return;\n    var textareaDom = textareaDomRef.current;\n    var previewDom = previewRef.current ? previewRef.current.mdp.current : undefined;\n\n    if (!initScroll.current) {\n      active.current = type;\n      initScroll.current = true;\n    }\n\n    if (textareaDom && previewDom) {\n      var scale = (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n\n      var scrollTop = 0;\n\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n\n      dispatch({\n        scrollTop: scrollTop\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsx(EditorContext.Provider, {\n    value: _extends({}, state, {\n      dispatch: dispatch\n    }),\n    children: /*#__PURE__*/_jsxs(\"div\", _extends({\n      ref: container,\n      className: cls\n    }, other, {\n      onClick: function onClick() {\n        dispatch({\n          barPopup: _extends({}, setGroupPopFalse(state.barPopup))\n        });\n      },\n      style: _extends({}, other.style, {\n        height: state.fullscreen ? '100%' : hideToolbar ? Number(state.height) - toolbarHeight : state.height\n      }),\n      children: [!hideToolbar && /*#__PURE__*/_jsx(Toolbar, {\n        prefixCls: prefixCls,\n        height: toolbarHeight\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: prefixCls + \"-content\",\n        style: {\n          height: state.fullscreen ? \"calc(100% - \" + toolbarHeight + \"px)\" : Number(state.height) - toolbarHeight\n        },\n        children: [/(edit|live)/.test(state.preview || '') && /*#__PURE__*/_jsx(TextArea, _extends({\n          className: prefixCls + \"-input\",\n          prefixCls: prefixCls,\n          autoFocus: autoFocus\n        }, textareaProps, {\n          renderTextarea: renderTextarea,\n          onScroll: function onScroll(e) {\n            return handleScroll(e, 'text');\n          }\n        })), /(live|preview)/.test(state.preview || '') && /*#__PURE__*/_jsx(MarkdownPreview, _extends({}, previewOptions, {\n          onScroll: function onScroll(e) {\n            return handleScroll(e, 'preview');\n          },\n          ref: previewRef,\n          source: state.markdown || '',\n          className: prefixCls + \"-preview\"\n        }))]\n      }), visiableDragbar && !state.fullscreen && /*#__PURE__*/_jsx(DragBar, {\n        prefixCls: prefixCls,\n        height: state.height,\n        maxHeight: maxHeight,\n        minHeight: minHeight,\n        onChange: function onChange(newHeight) {\n          dispatch({\n            height: newHeight\n          });\n        }\n      })]\n    }))\n  });\n};\n\nvar mdEditor = /*#__PURE__*/React.forwardRef(InternalMDEditor);\nmdEditor.Markdown = MarkdownPreview;\nexport default mdEditor;","map":{"version":3,"sources":["../src/Editor.tsx"],"names":["data","Object","keyname","InternalMDEditor","prefixCls","value","commands","getCommands","extraCommands","getExtraCommands","height","toolbarHeight","enableScroll","visiableDragbar","highlightEnable","preview","previewType","fullscreen","previewOptions","maxHeight","minHeight","tabSize","renderTextarea","props","useReducer","markdown","scrollTop","scrollTopPreview","onChange","barPopup","container","useRef","previewRef","enableScrollRef","useImperativeHandle","useMemo","useEffect","stateInit","propsValue","dispatch","cls","state","autoFocus","textareaDomRef","active","initScroll","handleScroll","textareaDom","previewDom","scale","e","setGroupPopFalse","other","hideToolbar","Number","newHeight","mdEditor","React"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle } from 'react';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands, ICommand } from './commands';\nimport { reducer, EditorContext, ContextStore, PreviewType } from './Context';\nimport './index.less';\n\nexport interface IProps {\n  prefixCls?: string;\n  className?: string;\n}\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: number;\n  /**\n   * Custom toolbar heigth\n   * @default 29px\n   */\n  toolbarHeight?: number;\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  /**\n   * Full screen display editor.\n   */\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /** Use div to replace TextArea or re-render TextArea */\n  renderTextarea?: ITextAreaProps['renderTextarea'];\n  /**\n   * Disable editing area code highlighting. The value is `false`, which increases the editing speed.\n   * @default true\n   */\n  highlightEnable?: boolean;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  extraCommands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n  /** Whether to enable scrolling */\n  enableScroll?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean> = {}) {\n  Object.keys(data).forEach((keyname) => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (\n  props: MDEditorProps,\n  ref?: ((instance: ContextStore) => void) | React.RefObject<ContextStore> | null,\n) => {\n  const {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    extraCommands = getExtraCommands(),\n    height = 200,\n    toolbarHeight = 29,\n    enableScroll = true,\n    visiableDragbar = true,\n    highlightEnable = true,\n    preview: previewType = 'live',\n    fullscreen = false,\n    previewOptions = {},\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    onChange,\n    hideToolbar,\n    renderTextarea,\n    ...other\n  } = props || {};\n  let [state, dispatch] = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    height,\n    highlightEnable,\n    tabSize,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands,\n    extraCommands,\n    fullscreen,\n    onChange,\n    barPopup: {},\n  });\n  const container = useRef<HTMLDivElement>(null);\n  const previewRef = useRef<MarkdownPreviewRef>(null);\n  const enableScrollRef = useRef(enableScroll);\n\n  useImperativeHandle(ref, () => ({ ...state }));\n  useMemo(() => (enableScrollRef.current = enableScroll), [enableScroll]);\n  useEffect(() => {\n    const stateInit: ContextStore = {};\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n    if (dispatch) {\n      dispatch({ ...state, ...stateInit });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const cls = [\n    className,\n    prefixCls,\n    state.preview ? `${prefixCls}-show-${state.preview}` : null,\n    state.fullscreen ? `${prefixCls}-fullscreen` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  useMemo(\n    () => propsValue !== state.markdown && dispatch({ markdown: propsValue || '' }),\n    [propsValue, state.markdown],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => previewType !== state.preview && dispatch({ preview: previewType }), [previewType]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => height !== state.height && dispatch({ height: height }), [height]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => tabSize !== state.tabSize && dispatch({ tabSize }), [tabSize]);\n  useMemo(\n    () => highlightEnable !== state.highlightEnable && dispatch({ highlightEnable }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [highlightEnable],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => autoFocus !== state.autoFocus && dispatch({ autoFocus: autoFocus }), [autoFocus]);\n  useMemo(\n    () => fullscreen !== state.fullscreen && dispatch({ fullscreen: fullscreen }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [fullscreen],\n  );\n\n  const textareaDomRef = useRef<HTMLDivElement>();\n  const active = useRef<'text' | 'preview'>('preview');\n  const initScroll = useRef(false);\n\n  useMemo(() => {\n    textareaDomRef.current = state.textareaWarp;\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', () => {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', () => {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>, type: 'text' | 'preview') => {\n    if (!enableScrollRef.current) return;\n    const textareaDom = textareaDomRef.current;\n    const previewDom = previewRef.current ? previewRef.current.mdp.current : undefined;\n    if (!initScroll.current) {\n      active.current = type;\n      initScroll.current = true;\n    }\n    if (textareaDom && previewDom) {\n      const scale =\n        (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n      let scrollTop = 0;\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n      dispatch({ scrollTop });\n    }\n  };\n\n  return (\n    <EditorContext.Provider value={{ ...state, dispatch }}>\n      <div\n        ref={container}\n        className={cls}\n        {...other}\n        onClick={() => {\n          dispatch({ barPopup: { ...setGroupPopFalse(state.barPopup) } });\n        }}\n        style={{\n          ...other.style,\n          height: state.fullscreen ? '100%' : hideToolbar ? Number(state.height) - toolbarHeight : state.height,\n        }}\n      >\n        {!hideToolbar && <Toolbar prefixCls={prefixCls} height={toolbarHeight} />}\n        <div\n          className={`${prefixCls}-content`}\n          style={{\n            height: state.fullscreen ? `calc(100% - ${toolbarHeight}px)` : Number(state.height) - toolbarHeight,\n          }}\n        >\n          {/(edit|live)/.test(state.preview || '') && (\n            <TextArea\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              renderTextarea={renderTextarea}\n              onScroll={(e) => handleScroll(e, 'text')}\n            />\n          )}\n          {/(live|preview)/.test(state.preview || '') && (\n            <MarkdownPreview\n              {...(previewOptions as unknown)}\n              onScroll={(e) => handleScroll(e, 'preview')}\n              ref={previewRef}\n              source={state.markdown || ''}\n              className={`${prefixCls}-preview`}\n            />\n          )}\n        </div>\n        {visiableDragbar && !state.fullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={state.height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              dispatch({ height: newHeight });\n            }}\n          />\n        )}\n      </div>\n    </EditorContext.Provider>\n  );\n};\n\nconst mdEditor = React.forwardRef<ContextStore, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof mdEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(mdEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default mdEditor as MDEditor;\n"]},"metadata":{},"sourceType":"module"}