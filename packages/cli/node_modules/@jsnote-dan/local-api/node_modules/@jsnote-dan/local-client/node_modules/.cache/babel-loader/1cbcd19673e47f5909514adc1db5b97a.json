{"ast":null,"code":"import axios from \"axios\";\nexport const unpkgPathPlugin = () => {\n  return {\n    // name is mainly to identify this plugin for debugging purposes\n    name: \"unpkg-path-plugin\",\n\n    // setup of bundling process\n    setup(build) {\n      // onResolve event listener (override esbuild's default process of figuring out where the main file is stored)\n      // can have multiple onResolve listeners for different types of files, with the regex filter changing to look for the different types of files\n      build.onResolve({\n        filter: /.*/\n      }, async args => {\n        console.log(\"onResolve\", args);\n\n        if (args.path === \"index.js\") {\n          return {\n            path: args.path,\n            namespace: \"a\"\n          };\n        } else {\n          // return path to where the main file is stored (in this case, index.js as defined in the \"entry point\")\n          // namespace is an \"identifier\" which can be used in onLoad to apply the onLoad function to only the files with the specified namespace\n          return {\n            path: \"https://unpkg.com/tiny-test-pkg@1.0.0/index.js\",\n            namespace: \"a\"\n          };\n        }\n      }); // onLoad event listener (override esbuild's default file loading process)\n\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        console.log(\"onLoad\", args);\n\n        if (args.path === \"index.js\") {\n          return {\n            loader: \"jsx\",\n            contents: `\n                            const message = require(\"tiny-test-pkg\");\n                            console.log(message);\n                        `\n          };\n        }\n\n        const {\n          data\n        } = await axios.get(args.path);\n        return {\n          loader: \"jsx\",\n          contents: data\n        };\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/Udemy/React and Typescript (Stephen Grider)/jbook/src/plugins/unpkg-path-plugin.ts"],"names":["axios","unpkgPathPlugin","name","setup","build","onResolve","filter","args","console","log","path","namespace","onLoad","loader","contents","data","get"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACpC,SAAO;AACN;AACAC,IAAAA,IAAI,EAAE,mBAFA;;AAGN;AACAC,IAAAA,KAAK,CAACC,KAAD,EAA6B;AACjC;AACA;AACAA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAkC,MAAOC,IAAP,IAAqB;AACtDC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,IAAzB;;AACA,YAAIA,IAAI,CAACG,IAAL,KAAc,UAAlB,EAA8B;AAC7B,iBAAO;AAAEA,YAAAA,IAAI,EAAEH,IAAI,CAACG,IAAb;AAAmBC,YAAAA,SAAS,EAAE;AAA9B,WAAP;AACA,SAFD,MAEO;AACN;AACA;AACA,iBAAO;AAAED,YAAAA,IAAI,EAAE,gDAAR;AAA0DC,YAAAA,SAAS,EAAE;AAArE,WAAP;AACA;AACD,OATD,EAHiC,CAajC;;AACAP,MAAAA,KAAK,CAACQ,MAAN,CAAa;AAAEN,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOC,IAAP,IAAqB;AACnDC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;;AACA,YAAIA,IAAI,CAACG,IAAL,KAAc,UAAlB,EAA8B;AAC7B,iBAAO;AACNG,YAAAA,MAAM,EAAE,KADF;AAENC,YAAAA,QAAQ,EACN;AACR;AACA;AACA;AANY,WAAP;AAQA;;AAED,cAAM;AAAEC,UAAAA;AAAF,YAAgB,MAAMf,KAAK,CAACgB,GAAN,CAAUT,IAAI,CAACG,IAAf,CAA5B;AACA,eAAO;AACNG,UAAAA,MAAM,EAAE,KADF;AAENC,UAAAA,QAAQ,EAAEC;AAFJ,SAAP;AAIA,OAlBD;AAmBA;;AArCK,GAAP;AAuCA,CAxCM","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\r\nimport axios from \"axios\";\r\n\r\nexport const unpkgPathPlugin = () => {\r\n\treturn {\r\n\t\t// name is mainly to identify this plugin for debugging purposes\r\n\t\tname: \"unpkg-path-plugin\",\r\n\t\t// setup of bundling process\r\n\t\tsetup(build: esbuild.PluginBuild) {\r\n\t\t\t// onResolve event listener (override esbuild's default process of figuring out where the main file is stored)\r\n\t\t\t// can have multiple onResolve listeners for different types of files, with the regex filter changing to look for the different types of files\r\n\t\t\tbuild.onResolve({ filter: /.*/ }, async (args: any) => {\r\n\t\t\t\tconsole.log(\"onResolve\", args);\r\n\t\t\t\tif (args.path === \"index.js\") {\r\n\t\t\t\t\treturn { path: args.path, namespace: \"a\" };\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// return path to where the main file is stored (in this case, index.js as defined in the \"entry point\")\r\n\t\t\t\t\t// namespace is an \"identifier\" which can be used in onLoad to apply the onLoad function to only the files with the specified namespace\r\n\t\t\t\t\treturn { path: \"https://unpkg.com/tiny-test-pkg@1.0.0/index.js\", namespace: \"a\" };\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// onLoad event listener (override esbuild's default file loading process)\r\n\t\t\tbuild.onLoad({ filter: /.*/ }, async (args: any) => {\r\n\t\t\t\tconsole.log(\"onLoad\", args);\r\n\t\t\t\tif (args.path === \"index.js\") {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloader: \"jsx\",\r\n\t\t\t\t\t\tcontents:\r\n\t\t\t\t\t\t\t`\r\n                            const message = require(\"tiny-test-pkg\");\r\n                            console.log(message);\r\n                        `\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst { data }: any = await axios.get(args.path);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tloader: \"jsx\",\r\n\t\t\t\t\tcontents: data\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}