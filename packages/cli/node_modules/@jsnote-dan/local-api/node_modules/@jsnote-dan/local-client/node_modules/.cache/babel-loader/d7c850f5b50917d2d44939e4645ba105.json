{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryzen\\\\Desktop\\\\jbook\\\\packages\\\\local-client\\\\src\\\\components\\\\code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./code-cell.css\";\nimport { useEffect } from \"react\";\nimport CodeEditor from \"./code-editor\";\nimport Preview from \"./preview\";\nimport Resizable from \"./resizable\";\nimport { useActions } from \"../hooks/use-actions\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport { Loader, Segment } from \"semantic-ui-react\";\nimport { useCumulativeCode } from \"../hooks/use-cumulative-code\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = _ref => {\n  _s();\n\n  let {\n    cell\n  } = _ref;\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles[cell.id]);\n  const cumulativeCode = useCumulativeCode(cell.id);\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cell.id, cumulativeCode, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"calc(100% - 10px)\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this), !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(Loader, {\n          active: true,\n          indeterminate: true,\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n        code: bundle.code,\n        bundleError: bundle.err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CodeCell, \"YdvzI4JhxthmaOjy94Z5IgkoJ60=\", false, function () {\n  return [useActions, useTypedSelector, useCumulativeCode];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/packages/local-client/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","Loader","Segment","useCumulativeCode","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","timer","setTimeout","clearTimeout","height","display","flexDirection","content","value","loading","code","err"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,mBAAhC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;;;AAMA,MAAMC,QAAQ,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAAEC,IAAAA;AAAF,GAA4B;AAC7C,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BR,UAAU,EAA/C;AACA,QAAMS,MAAM,GAAGR,gBAAgB,CAACS,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAAV,CAA/B;AACA,QAAMC,cAAc,GAAGT,iBAAiB,CAACE,IAAI,CAACM,EAAN,CAAxC;AAEAhB,EAAAA,SAAS,CACR,MAAM;AACL,UAAMkB,KAAK,GAAGC,UAAU,CAAC,YAAY;AACpCP,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUC,cAAV,CAAZ;AACA,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAM;AACZG,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACA,KAFD;AAGA,GATO,EAUR;AACA,GAAER,IAAI,CAACM,EAAP,EAAWC,cAAX,EAA2BL,YAA3B,CAXQ,CAAT;AAcA,sBACC,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACC;AACC,MAAA,KAAK,EAAE;AACNS,QAAAA,MAAM,EAAE,mBADF;AAENC,QAAAA,OAAO,EAAE,MAFH;AAGNC,QAAAA,aAAa,EAAE;AAHT,OADR;AAAA,8BAOC,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACC,QAAC,UAAD;AACC,UAAA,YAAY,EAAEb,IAAI,CAACc,OADpB;AAEC,UAAA,QAAQ,EAAEC,KAAK,IAAId,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUS,KAAV;AAF9B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cAPD,EAaE,CAACZ,MAAD,IAAWA,MAAM,CAACa,OAAlB,gBACA,QAAC,OAAD;AAAA,+BACC,QAAC,MAAD;AAAQ,UAAA,MAAM,MAAd;AAAe,UAAA,aAAa,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADA,gBAOA,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEb,MAAM,CAACc,IAAtB;AAA4B,QAAA,WAAW,EAAEd,MAAM,CAACe;AAAhD;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAgCA,CAnDD;;GAAMnB,Q;UACgCL,U,EACtBC,gB,EACQG,iB;;;KAHlBC,Q;AAqDN,eAAeA,QAAf","sourcesContent":["import \"./code-cell.css\";\r\nimport { useEffect } from \"react\";\r\nimport CodeEditor from \"./code-editor\";\r\nimport Preview from \"./preview\";\r\nimport Resizable from \"./resizable\";\r\nimport { Cell } from \"../state\";\r\nimport { useActions } from \"../hooks/use-actions\";\r\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\r\nimport { Loader, Segment } from \"semantic-ui-react\";\r\nimport { useCumulativeCode } from \"../hooks/use-cumulative-code\";\r\n\r\ninterface CodeCellProps {\r\n\tcell: Cell;\r\n}\r\n\r\nconst CodeCell = ({ cell }: CodeCellProps) => {\r\n\tconst { updateCell, createBundle } = useActions();\r\n\tconst bundle = useTypedSelector(state => state.bundles[cell.id]);\r\n\tconst cumulativeCode = useCumulativeCode(cell.id);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconst timer = setTimeout(async () => {\r\n\t\t\t\tcreateBundle(cell.id, cumulativeCode);\r\n\t\t\t}, 750);\r\n\r\n\t\t\treturn () => {\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t};\r\n\t\t},\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t\t[ cell.id, cumulativeCode, createBundle ]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<Resizable direction=\"vertical\">\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"calc(100% - 10px)\",\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tflexDirection: \"row\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Resizable direction=\"horizontal\">\r\n\t\t\t\t\t<CodeEditor\r\n\t\t\t\t\t\tinitialValue={cell.content}\r\n\t\t\t\t\t\tonChange={value => updateCell(cell.id, value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Resizable>\r\n\t\t\t\t{!bundle || bundle.loading ? (\r\n\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t<Loader active indeterminate>\r\n\t\t\t\t\t\t\tLoading...\r\n\t\t\t\t\t\t</Loader>\r\n\t\t\t\t\t</Segment>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Preview code={bundle.code} bundleError={bundle.err} />\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t{/* <Segment>\r\n\t\t\t\t<Loader active indeterminate>\r\n\t\t\t\t\tLoading...\r\n\t\t\t\t</Loader>\r\n\t\t\t</Segment> */}\r\n\t\t</Resizable>\r\n\t);\r\n};\r\n\r\nexport default CodeCell;\r\n"]},"metadata":{},"sourceType":"module"}