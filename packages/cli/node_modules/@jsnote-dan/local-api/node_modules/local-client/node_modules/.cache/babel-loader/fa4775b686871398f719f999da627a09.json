{"ast":null,"code":"import * as esbuild from \"esbuild-wasm\";\nimport { unpkgPathPlugin } from \"./plugins/unpkg-path-plugin\";\nimport { fetchPlugin } from \"./plugins/fetch-plugin\"; // to check if esbuild has been initialized\n\nlet service = false;\n\nconst bundle = async rawCode => {\n  if (!service) {\n    // initialize esbuild\n    await esbuild.initialize({\n      worker: true,\n      wasmURL: \"https://unpkg.com/esbuild-wasm/esbuild.wasm\"\n    });\n    service = true;\n  } else {\n    // bundle code\n    try {\n      const result = await esbuild.build({\n        entryPoints: [\"index.js\"],\n        bundle: true,\n        write: false,\n        plugins: [unpkgPathPlugin(), fetchPlugin(rawCode)],\n        define: {\n          \"process.env.NODE_ENV\": '\"production\"',\n          global: \"window\"\n        }\n      });\n      return result.outputFiles[0].text;\n    } catch (err) {\n      // err is of type unknown meaning technically anything could be thrown, so need to check if it is an instance of Error first\n      if (err instanceof Error) {\n        // Dispatch action to update repository state to error\n        return err.message;\n      } else {\n        console.log(\"Error occurred!\");\n      }\n    }\n  }\n};\n\nexport default bundle;","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/src/bundler/index.ts"],"names":["esbuild","unpkgPathPlugin","fetchPlugin","service","bundle","rawCode","initialize","worker","wasmURL","result","build","entryPoints","write","plugins","define","global","outputFiles","text","err","Error","message","console","log"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,cAAzB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,WAAT,QAA4B,wBAA5B,C,CAEA;;AACA,IAAIC,OAAgB,GAAG,KAAvB;;AAEA,MAAMC,MAAM,GAAG,MAAOC,OAAP,IAA2B;AACzC,MAAI,CAACF,OAAL,EAAc;AACb;AACA,UAAMH,OAAO,CAACM,UAAR,CAAmB;AACxBC,MAAAA,MAAM,EAAE,IADgB;AAExBC,MAAAA,OAAO,EAAE;AAFe,KAAnB,CAAN;AAIAL,IAAAA,OAAO,GAAG,IAAV;AACA,GAPD,MAOO;AACN;AACA,QAAI;AACH,YAAMM,MAAM,GAAG,MAAMT,OAAO,CAACU,KAAR,CAAc;AAClCC,QAAAA,WAAW,EAAE,CAAE,UAAF,CADqB;AAElCP,QAAAA,MAAM,EAAE,IAF0B;AAGlCQ,QAAAA,KAAK,EAAE,KAH2B;AAIlCC,QAAAA,OAAO,EAAE,CAAEZ,eAAe,EAAjB,EAAqBC,WAAW,CAACG,OAAD,CAAhC,CAJyB;AAKlCS,QAAAA,MAAM,EACL;AACC,kCAAwB,cADzB;AAECC,UAAAA,MAAM,EAAE;AAFT;AANiC,OAAd,CAArB;AAWA,aAAON,MAAM,CAACO,WAAP,CAAmB,CAAnB,EAAsBC,IAA7B;AACA,KAbD,CAaE,OAAOC,GAAP,EAAY;AACb;AACA,UAAIA,GAAG,YAAYC,KAAnB,EAA0B;AACzB;AACA,eAAOD,GAAG,CAACE,OAAX;AACA,OAHD,MAGO;AACNC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA;AACD;AACD;AACD,CAjCD;;AAmCA,eAAelB,MAAf","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\r\nimport { unpkgPathPlugin } from \"./plugins/unpkg-path-plugin\";\r\nimport { fetchPlugin } from \"./plugins/fetch-plugin\";\r\n\r\n// to check if esbuild has been initialized\r\nlet service: boolean = false;\r\n\r\nconst bundle = async (rawCode: string) => {\r\n\tif (!service) {\r\n\t\t// initialize esbuild\r\n\t\tawait esbuild.initialize({\r\n\t\t\tworker: true,\r\n\t\t\twasmURL: \"https://unpkg.com/esbuild-wasm/esbuild.wasm\"\r\n\t\t});\r\n\t\tservice = true;\r\n\t} else {\r\n\t\t// bundle code\r\n\t\ttry {\r\n\t\t\tconst result = await esbuild.build({\r\n\t\t\t\tentryPoints: [ \"index.js\" ],\r\n\t\t\t\tbundle: true,\r\n\t\t\t\twrite: false,\r\n\t\t\t\tplugins: [ unpkgPathPlugin(), fetchPlugin(rawCode) ],\r\n\t\t\t\tdefine:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"process.env.NODE_ENV\": '\"production\"',\r\n\t\t\t\t\t\tglobal: \"window\"\r\n\t\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result.outputFiles[0].text;\r\n\t\t} catch (err) {\r\n\t\t\t// err is of type unknown meaning technically anything could be thrown, so need to check if it is an instance of Error first\r\n\t\t\tif (err instanceof Error) {\r\n\t\t\t\t// Dispatch action to update repository state to error\r\n\t\t\t\treturn err.message;\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"Error occurred!\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default bundle;\r\n"]},"metadata":{},"sourceType":"module"}