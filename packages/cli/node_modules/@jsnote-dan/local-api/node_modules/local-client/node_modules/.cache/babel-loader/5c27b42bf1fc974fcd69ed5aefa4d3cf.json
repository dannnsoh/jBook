{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Ryzen/Desktop/jbook/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\"];\nimport React, { useContext, useEffect } from 'react';\nimport { EditorContext } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Textarea(props) {\n  var prefixCls = props.prefixCls,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useContext = useContext(EditorContext),\n      markdown = _useContext.markdown,\n      commands = _useContext.commands,\n      fullscreen = _useContext.fullscreen,\n      preview = _useContext.preview,\n      highlightEnable = _useContext.highlightEnable,\n      extraCommands = _useContext.extraCommands,\n      tabSize = _useContext.tabSize,\n      _onChange = _useContext.onChange,\n      dispatch = _useContext.dispatch;\n\n  var textRef = React.useRef(null);\n  var executeRef = React.useRef();\n  var statesRef = React.useRef({\n    fullscreen: fullscreen,\n    preview: preview\n  });\n  useEffect(function () {\n    statesRef.current = {\n      fullscreen: fullscreen,\n      preview: preview,\n      highlightEnable: highlightEnable\n    };\n  }, [fullscreen, preview, highlightEnable]);\n  useEffect(function () {\n    if (textRef.current && dispatch) {\n      var commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({\n        textarea: textRef.current,\n        commandOrchestrator: commandOrchestrator\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  var onKeyDown = function onKeyDown(e) {\n    handleKeyDown(e, tabSize);\n    shortcuts(e, [].concat(_toConsumableArray(commands || []), _toConsumableArray(extraCommands || [])), executeRef.current, dispatch, statesRef.current);\n  };\n\n  useEffect(function () {\n    if (textRef.current) {\n      textRef.current.addEventListener('keydown', onKeyDown);\n    }\n\n    return function () {\n      if (textRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        textRef.current.removeEventListener('keydown', onKeyDown);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsx(\"textarea\", _extends({\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    autoCapitalize: \"off\",\n    spellCheck: false\n  }, other, {\n    ref: textRef,\n    className: prefixCls + \"-text-input \" + (other.className ? other.className : ''),\n    value: markdown,\n    onChange: function onChange(e) {\n      dispatch && dispatch({\n        markdown: e.target.value\n      });\n      _onChange && _onChange(e.target.value);\n    }\n  }));\n}","map":{"version":3,"sources":["../../../src/components/TextArea/Textarea.tsx"],"names":["prefixCls","onChange","dispatch","useContext","textRef","React","executeRef","statesRef","fullscreen","preview","useEffect","highlightEnable","commandOrchestrator","textarea","onKeyDown","e","handleKeyDown","shortcuts","commands","extraCommands","other","markdown","value"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { IProps } from '../../Editor';\nimport { EditorContext, ExecuteCommandState } from '../../Context';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport handleKeyDown from './handleKeyDown';\nimport shortcuts from './shortcuts';\nimport './index.less';\n\nexport interface TextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value'>, IProps {}\n\nexport default function Textarea(props: TextAreaProps) {\n  const { prefixCls, ...other } = props;\n  const { markdown, commands, fullscreen, preview, highlightEnable, extraCommands, tabSize, onChange, dispatch } =\n    useContext(EditorContext);\n  const textRef = React.useRef<HTMLTextAreaElement>(null);\n  const executeRef = React.useRef<TextAreaCommandOrchestrator>();\n  const statesRef = React.useRef<ExecuteCommandState>({ fullscreen, preview });\n\n  useEffect(() => {\n    statesRef.current = { fullscreen, preview, highlightEnable };\n  }, [fullscreen, preview, highlightEnable]);\n\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      const commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({ textarea: textRef.current, commandOrchestrator });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onKeyDown = (e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>) => {\n    handleKeyDown(e, tabSize);\n    shortcuts(e, [...(commands || []), ...(extraCommands || [])], executeRef.current, dispatch, statesRef.current);\n  };\n  useEffect(() => {\n    if (textRef.current) {\n      textRef.current.addEventListener('keydown', onKeyDown);\n    }\n    return () => {\n      if (textRef.current) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        textRef.current.removeEventListener('keydown', onKeyDown);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <textarea\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      autoCapitalize=\"off\"\n      spellCheck={false}\n      {...other}\n      ref={textRef}\n      className={`${prefixCls}-text-input ${other.className ? other.className : ''}`}\n      value={markdown}\n      onChange={(e) => {\n        dispatch && dispatch({ markdown: e.target.value });\n        onChange && onChange(e.target.value);\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}