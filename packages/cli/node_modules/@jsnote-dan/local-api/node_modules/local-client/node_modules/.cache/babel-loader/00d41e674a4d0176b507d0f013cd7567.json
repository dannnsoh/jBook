{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, draft => {\n    switch (action.type) {\n      case ActionType.UPDATE_CELL:\n        const {\n          id,\n          content\n        } = action.payload;\n        draft.data[id].content = content;\n        return draft;\n\n      case ActionType.DELETE_CELL:\n        // delete cell\n        delete draft.data[action.payload]; // delete cell id from order array\n\n        draft.order = draft.order.filter(id => id !== action.payload);\n        return draft;\n\n      case ActionType.MOVE_CELL:\n        const {\n          direction\n        } = action.payload; // index of cell\n\n        const index = draft.order.findIndex(id => id === action.payload.id); // new index of cell depending on move direction\n\n        const targetId = direction === \"up\" ? index - 1 : index + 1; // ensure new index is within bounds of order array\n\n        if (targetId < 0 || targetId > draft.order.length - 1) {\n          return draft;\n        } // swap\n\n\n        draft.order[index] = draft.order[targetId];\n        draft.order[targetId] = action.payload.id;\n        return draft;\n\n      case ActionType.INSERT_CELL_BEFORE:\n        const cell = {\n          id: randomId(),\n          type: action.payload.type,\n          content: \"\"\n        }; // insert cell into data array, which contains all the cells and their ids\n\n        draft.data[cell.id] = cell; // find index of cell to insert before\n\n        const foundIndex = draft.order.findIndex(id => id === action.payload.id); // if index is -1 (means no index was found for that id), add cell to end of order array\n\n        if (foundIndex === -1) {\n          draft.order.push(cell.id);\n        } else {\n          draft.order.splice(foundIndex, 0, cell.id);\n        }\n\n        return draft;\n\n      default:\n        return draft;\n    }\n  });\n};\n\nconst randomId = () => {\n  return Math.random().toString(36).substr(2, 5);\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","draft","type","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetId","length","INSERT_CELL_BEFORE","cell","randomId","foundIndex","push","splice","Math","random","toString","substr"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\nimport { ActionType } from \"../action-types\";\r\nimport { Action } from \"../actions\";\r\nimport { Cell } from \"../cell\";\r\n\r\ninterface CellsState {\r\n\tloading: boolean;\r\n\terror: string | null;\r\n\torder: string[];\r\n\tdata: {\r\n\t\t[key: string]: Cell;\r\n\t};\r\n}\r\n\r\nconst initialState: CellsState = {\r\n\tloading: false,\r\n\terror: null,\r\n\torder: [],\r\n\tdata: {}\r\n};\r\n\r\nconst reducer = (state: CellsState = initialState, action: Action) => {\r\n\treturn produce(state, (draft) => {\r\n\t\tswitch (action.type) {\r\n\t\t\tcase ActionType.UPDATE_CELL:\r\n\t\t\t\tconst { id, content } = action.payload;\r\n\t\t\t\tdraft.data[id].content = content;\r\n\t\t\t\treturn draft;\r\n\t\t\tcase ActionType.DELETE_CELL:\r\n\t\t\t\t// delete cell\r\n\t\t\t\tdelete draft.data[action.payload];\r\n\t\t\t\t// delete cell id from order array\r\n\t\t\t\tdraft.order = draft.order.filter((id) => id !== action.payload);\r\n\t\t\t\treturn draft;\r\n\r\n\t\t\tcase ActionType.MOVE_CELL:\r\n\t\t\t\tconst { direction } = action.payload;\r\n\t\t\t\t// index of cell\r\n\t\t\t\tconst index = draft.order.findIndex((id) => id === action.payload.id);\r\n\t\t\t\t// new index of cell depending on move direction\r\n\t\t\t\tconst targetId = direction === \"up\" ? index - 1 : index + 1;\r\n\t\t\t\t// ensure new index is within bounds of order array\r\n\t\t\t\tif (targetId < 0 || targetId > draft.order.length - 1) {\r\n\t\t\t\t\treturn draft;\r\n\t\t\t\t}\r\n\t\t\t\t// swap\r\n\t\t\t\tdraft.order[index] = draft.order[targetId];\r\n\t\t\t\tdraft.order[targetId] = action.payload.id;\r\n\t\t\t\treturn draft;\r\n\r\n\t\t\tcase ActionType.INSERT_CELL_BEFORE:\r\n\t\t\t\tconst cell: Cell = {\r\n\t\t\t\t\tid: randomId(),\r\n\t\t\t\t\ttype: action.payload.type,\r\n\t\t\t\t\tcontent: \"\"\r\n\t\t\t\t};\r\n\t\t\t\t// insert cell into data array, which contains all the cells and their ids\r\n\t\t\t\tdraft.data[cell.id] = cell;\r\n\t\t\t\t// find index of cell to insert before\r\n\t\t\t\tconst foundIndex = draft.order.findIndex((id) => id === action.payload.id);\r\n\t\t\t\t// if index is -1 (means no index was found for that id), add cell to end of order array\r\n\t\t\t\tif (foundIndex === -1) {\r\n\t\t\t\t\tdraft.order.push(cell.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdraft.order.splice(foundIndex, 0, cell.id);\r\n\t\t\t\t}\r\n\t\t\t\treturn draft;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn draft;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nconst randomId = () => {\r\n\treturn Math.random().toString(36).substr(2, 5);\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}