{"ast":null,"code":"import produce from \"immer\";\nimport { ActionType } from \"../action-types\";\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return;\n\n    case ActionType.DELETE_CELL:\n      return state;\n\n    case ActionType.MOVE_CELL:\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      return state;\n\n    default:\n      return state;\n  }\n});\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","MOVE_CELL","INSERT_CELL_BEFORE"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAaA,MAAMC,YAAwB,GAAG;AAChCC,EAAAA,OAAO,EAAE,KADuB;AAEhCC,EAAAA,KAAK,EAAE,IAFyB;AAGhCC,EAAAA,KAAK,EAAE,EAHyB;AAIhCC,EAAAA,IAAI,EAAE;AAJ0B,CAAjC;AAOA,MAAMC,OAAO,GAAGP,OAAO,CAAC,YAAyE;AAAA,MAAxEQ,KAAwE,uEAApDN,YAAoD;AAAA,MAAtCO,MAAsC;;AAChG,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKT,UAAU,CAACU,WAAhB;AACC,YAAM;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,UAAkBJ,MAAM,CAACK,OAA/B;AACAN,MAAAA,KAAK,CAACF,IAAN,CAAWM,EAAX,EAAeC,OAAf,GAAyBA,OAAzB;AACA;;AACD,SAAKZ,UAAU,CAACc,WAAhB;AACC,aAAOP,KAAP;;AACD,SAAKP,UAAU,CAACe,SAAhB;AACC,aAAOR,KAAP;;AACD,SAAKP,UAAU,CAACgB,kBAAhB;AACC,aAAOT,KAAP;;AACD;AACC,aAAOA,KAAP;AAZF;AAcA,CAfsB,CAAvB;AAiBA,eAAeD,OAAf","sourcesContent":["import produce from \"immer\";\r\nimport { ActionType } from \"../action-types\";\r\nimport { Action } from \"../actions\";\r\nimport { Cell } from \"../cell\";\r\n\r\ninterface CellsState {\r\n\tloading: boolean;\r\n\terror: string | null;\r\n\torder: string[];\r\n\tdata: {\r\n\t\t[key: string]: Cell;\r\n\t};\r\n}\r\n\r\nconst initialState: CellsState = {\r\n\tloading: false,\r\n\terror: null,\r\n\torder: [],\r\n\tdata: {}\r\n};\r\n\r\nconst reducer = produce((state: CellsState = initialState, action: Action): CellsState | void => {\r\n\tswitch (action.type) {\r\n\t\tcase ActionType.UPDATE_CELL:\r\n\t\t\tconst { id, content } = action.payload;\r\n\t\t\tstate.data[id].content = content;\r\n\t\t\treturn;\r\n\t\tcase ActionType.DELETE_CELL:\r\n\t\t\treturn state;\r\n\t\tcase ActionType.MOVE_CELL:\r\n\t\t\treturn state;\r\n\t\tcase ActionType.INSERT_CELL_BEFORE:\r\n\t\t\treturn state;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}