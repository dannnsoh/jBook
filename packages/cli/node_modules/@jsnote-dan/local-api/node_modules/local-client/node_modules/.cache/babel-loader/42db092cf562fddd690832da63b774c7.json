{"ast":null,"code":"import axios from \"axios\";\nimport localforage from \"localforage\";\nconst fileCache = localforage.createInstance({\n  name: \"filecache\"\n});\nexport const fetchPlugin = inputCode => {\n  return {\n    // name is mainly to identify this plugin for debugging purposes\n    name: \"fetch-plugin\",\n\n    setup(build) {\n      // onLoad event listener (override esbuild's default file loading process)\n      build.onLoad({\n        filter: /(^index\\.js$)/\n      }, () => {\n        return {\n          loader: \"jsx\",\n          contents: inputCode\n        };\n      });\n      build.onLoad({\n        filter: /(.css$)/\n      }, async args => {\n        // Check to see if this file has already been fetched and if it is in the cache\n        const cachedResult = await fileCache.getItem(args.path); // If it is, return it immediately\n\n        if (cachedResult) {\n          return cachedResult;\n        } else {\n          // axios get request to path\n          const {\n            data,\n            request\n          } = await axios.get(args.path); // workaround to get css files as esbuild does not support importing css files from js files as of now\n          // comb through the css file to replace all new lines, single and double quotes\n\n          const escaped = data.replace(/\\n/g, \"\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n          const contents = fileType === \"css\" ? `\n\t\t\t\t\t\tconst style = document.createElement(\"style\");\n\t\t\t\t\t\tstyle.innerText = \"${escaped}\";\n\t\t\t\t\t\tdocument.head.appendChild(style);\n\t\t\t\t\t\t` : data;\n          const result = {\n            loader: \"jsx\",\n            contents: contents,\n            resolveDir: new URL(\"./\", request.responseURL).pathname\n          }; // store response in cache\n\n          await fileCache.setItem(args.path, result);\n          return result;\n        }\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        const cachedResult = await fileCache.getItem(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        } else {\n          const {\n            data,\n            request\n          } = await axios.get(args.path);\n          const fileType = args.path.match(/.css$/) ? \"css\" : \"jsx\";\n          const escaped = data.replace(/\\n/g, \"\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n          const contents = fileType === \"css\" ? `\n\t\t\t\t\t\tconst style = document.createElement(\"style\");\n\t\t\t\t\t\tstyle.innerText = \"${escaped}\";\n\t\t\t\t\t\tdocument.head.appendChild(style);\n\t\t\t\t\t\t` : data;\n          const result = {\n            loader: \"jsx\",\n            contents: contents,\n            resolveDir: new URL(\"./\", request.responseURL).pathname\n          };\n          await fileCache.setItem(args.path, result);\n          return result;\n        }\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/Udemy/React and Typescript (Stephen Grider)/jbook/src/plugins/fetch-plugin.ts"],"names":["axios","localforage","fileCache","createInstance","name","fetchPlugin","inputCode","setup","build","onLoad","filter","loader","contents","args","cachedResult","getItem","path","data","request","get","escaped","replace","fileType","result","resolveDir","URL","responseURL","pathname","setItem","match"],"mappings":"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","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\r\nimport axios from \"axios\";\r\nimport localforage from \"localforage\";\r\n\r\nconst fileCache = localforage.createInstance({\r\n\tname: \"filecache\"\r\n});\r\n\r\nexport const fetchPlugin = (inputCode: string) => {\r\n\treturn {\r\n\t\t// name is mainly to identify this plugin for debugging purposes\r\n\t\tname: \"fetch-plugin\",\r\n\t\tsetup(build: esbuild.PluginBuild) {\r\n\t\t\t// onLoad event listener (override esbuild's default file loading process)\r\n\t\t\tbuild.onLoad({ filter: /(^index\\.js$)/ }, () => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tloader: \"jsx\",\r\n\t\t\t\t\tcontents: inputCode\r\n\t\t\t\t};\r\n\t\t\t});\r\n\r\n\t\t\tbuild.onLoad({ filter: /(.css$)/ }, async (args: any) => {\r\n\t\t\t\t// Check to see if this file has already been fetched and if it is in the cache\r\n\t\t\t\tconst cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\r\n\t\t\t\t// If it is, return it immediately\r\n\t\t\t\tif (cachedResult) {\r\n\t\t\t\t\treturn cachedResult;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// axios get request to path\r\n\t\t\t\t\tconst { data, request } = await axios.get(args.path);\r\n\t\t\t\t\t// workaround to get css files as esbuild does not support importing css files from js files as of now\r\n\t\t\t\t\t// comb through the css file to replace all new lines, single and double quotes\r\n\t\t\t\t\tconst escaped = data.replace(/\\n/g, \"\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\r\n\t\t\t\t\tconst contents =\r\n\t\t\t\t\t\tfileType === \"css\"\r\n\t\t\t\t\t\t\t? `\r\n\t\t\t\t\t\tconst style = document.createElement(\"style\");\r\n\t\t\t\t\t\tstyle.innerText = \"${escaped}\";\r\n\t\t\t\t\t\tdocument.head.appendChild(style);\r\n\t\t\t\t\t\t`\r\n\t\t\t\t\t\t\t: data;\r\n\t\t\t\t\tconst result: esbuild.OnLoadResult = {\r\n\t\t\t\t\t\tloader: \"jsx\",\r\n\t\t\t\t\t\tcontents: contents,\r\n\t\t\t\t\t\tresolveDir: new URL(\"./\", request.responseURL).pathname\r\n\t\t\t\t\t};\r\n\t\t\t\t\t// store response in cache\r\n\t\t\t\t\tawait fileCache.setItem(args.path, result);\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tbuild.onLoad({ filter: /.*/ }, async (args: any) => {\r\n\t\t\t\tconst cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\r\n\t\t\t\tif (cachedResult) {\r\n\t\t\t\t\treturn cachedResult;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst { data, request } = await axios.get(args.path);\r\n\t\t\t\t\tconst fileType = args.path.match(/.css$/) ? \"css\" : \"jsx\";\r\n\t\t\t\t\tconst escaped = data.replace(/\\n/g, \"\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\r\n\t\t\t\t\tconst contents =\r\n\t\t\t\t\t\tfileType === \"css\"\r\n\t\t\t\t\t\t\t? `\r\n\t\t\t\t\t\tconst style = document.createElement(\"style\");\r\n\t\t\t\t\t\tstyle.innerText = \"${escaped}\";\r\n\t\t\t\t\t\tdocument.head.appendChild(style);\r\n\t\t\t\t\t\t`\r\n\t\t\t\t\t\t\t: data;\r\n\t\t\t\t\tconst result: esbuild.OnLoadResult = {\r\n\t\t\t\t\t\tloader: \"jsx\",\r\n\t\t\t\t\t\tcontents: contents,\r\n\t\t\t\t\t\tresolveDir: new URL(\"./\", request.responseURL).pathname\r\n\t\t\t\t\t};\r\n\t\t\t\t\tawait fileCache.setItem(args.path, result);\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}