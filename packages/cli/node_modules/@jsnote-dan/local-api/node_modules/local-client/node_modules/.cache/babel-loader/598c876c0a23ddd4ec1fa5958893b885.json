{"ast":null,"code":"// a redux middleware provides a point between an action and the momemnt it reaches the reducer\nexport const persistMiddleware = _ref => {\n  let {\n    dispatch\n  } = _ref;\n  return next => {\n    return action => {\n      next(action);\n    };\n  };\n};","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/packages/local-client/src/state/middlewares/persist-middleware.ts"],"names":["persistMiddleware","dispatch","next","action"],"mappings":"AAKA;AAEA,OAAO,MAAMA,iBAAiB,GAAG,QAAkD;AAAA,MAAjD;AAAEC,IAAAA;AAAF,GAAiD;AAClF,SAAQC,IAAD,IAAoC;AAC1C,WAAQC,MAAD,IAAoB;AAC1BD,MAAAA,IAAI,CAACC,MAAD,CAAJ;AACA,KAFD;AAGA,GAJD;AAKA,CANM","sourcesContent":["import { Dispatch } from \"redux\";\r\nimport { saveCells } from \"../action-creators\";\r\nimport { Action } from \"../actions\";\r\nimport { ActionType } from \"../action-types\";\r\n\r\n// a redux middleware provides a point between an action and the momemnt it reaches the reducer\r\n\r\nexport const persistMiddleware = ({ dispatch }: { dispatch: Dispatch<Action> }) => {\r\n\treturn (next: (action: Action) => void) => {\r\n\t\treturn (action: Action) => {\r\n\t\t\tnext(action);\r\n\t\t};\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}