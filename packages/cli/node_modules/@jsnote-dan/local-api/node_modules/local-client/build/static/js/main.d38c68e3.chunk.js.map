{"version":3,"sources":["state/action-types/index.ts","state/reducers/cellsReducer.ts","state/reducers/bundlesReducer.ts","state/reducers/index.ts","state/store.ts","bundler/index.ts","bundler/plugins/fetch-plugin.ts","bundler/plugins/unpkg-path-plugin.ts","state/action-creators/index.ts","hooks/use-typed-selector.ts","hooks/use-actions.ts","components/add-cell.tsx","components/action-bar.tsx","components/code-editor.tsx","components/preview.tsx","components/resizable.tsx","components/code-cell.tsx","hooks/use-cumulative-code.ts","components/text-editor.tsx","components/cell-list-item.tsx","components/cell-list.tsx","index.tsx"],"names":["ActionType","initialState","loading","error","order","data","randomId","Math","random","toString","substr","reducer","state","action","produce","draft","type","UPDATE_CELL","payload","id","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetId","length","INSERT_CELL_AFTER","cell","foundIndex","unshift","splice","BUNDLE_START","code","err","BUNDLE_COMPLETE","bundle","reducers","combineReducers","cells","cellsReducer","bundles","bundlesReducer","store","createStore","applyMiddleware","thunk","dispatch","service","fileCache","localforage","createInstance","name","fetchPlugin","inputCode","setup","build","onLoad","loader","contents","args","a","getItem","path","cachedResult","axios","get","request","escaped","replace","result","resolveDir","URL","responseURL","pathname","setItem","rawCode","esbuild","worker","wasmURL","entryPoints","write","plugins","onResolve","namespace","href","define","global","jsxFactory","jsxFragment","outputFiles","text","Error","message","updateCell","deleteCell","moveCell","insertCellAfter","cellType","createBundle","input","useTypedSelector","useSelector","useActions","useDispatch","useMemo","bindActionCreators","actionCreators","AddCell","previousCellId","forceVisible","Divider","horizontal","section","Button","Group","className","compact","animated","onClick","Content","visible","hidden","Icon","ActionBar","icon","CodeEditor","initialValue","onChange","editorRef","useRef","labelPosition","unformatted","current","getValue","formatted","prettier","format","parser","useTabs","semi","setValue","onMount","editor","monaco","onDidChangeModelContent","value","theme","language","height","options","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout","html","Preview","bundleError","iframe","useEffect","srcdoc","setTimeout","contentWindow","postMessage","title","ref","sandbox","srcDoc","Resizable","resizableAttr","children","useState","window","innerWidth","setInnerWidth","innerHeight","setInnerHeight","width","setWidth","timer","listener","clearTimeout","addEventListener","removeEventListener","Infinity","resizeHandles","maxConstraints","minConstraints","onResizeStop","event","size","CodeCell","cellId","cumulativeCode","orderedCells","map","c","push","join","style","display","flexDirection","Segment","Loader","active","indeterminate","TextEditor","editing","setEditing","target","contains","document","capture","autoFocus","Markdown","source","CellListItem","CellList","renderedCells","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d38c68e3.chunk.js","sourcesContent":["// export file for action.type\r\nexport enum ActionType {\r\n\tMOVE_CELL = \"move_cell\",\r\n\tDELETE_CELL = \"delete_cell\",\r\n\tINSERT_CELL_AFTER = \"insert_cell_after\",\r\n\tUPDATE_CELL = \"update_cell\",\r\n\tBUNDLE_START = \"bundle_start\",\r\n\tBUNDLE_COMPLETE = \"bundle_complete\"\r\n}\r\n","import produce from \"immer\";\r\nimport { ActionType } from \"../action-types\";\r\nimport { Action } from \"../actions\";\r\nimport { Cell } from \"../cell\";\r\n\r\ninterface CellsState {\r\n\tloading: boolean;\r\n\terror: string | null;\r\n\torder: string[];\r\n\tdata: {\r\n\t\t[key: string]: Cell;\r\n\t};\r\n}\r\n\r\nconst initialState: CellsState = {\r\n\tloading: false,\r\n\terror: null,\r\n\torder: [],\r\n\tdata: {}\r\n};\r\n\r\nconst reducer = (state: CellsState = initialState, action: Action): CellsState => {\r\n\treturn produce(state, (draft) => {\r\n\t\tswitch (action.type) {\r\n\t\t\tcase ActionType.UPDATE_CELL:\r\n\t\t\t\tconst { id, content } = action.payload;\r\n\t\t\t\tdraft.data[id].content = content;\r\n\t\t\t\treturn draft;\r\n\t\t\tcase ActionType.DELETE_CELL:\r\n\t\t\t\t// delete cell\r\n\t\t\t\tdelete draft.data[action.payload];\r\n\t\t\t\t// delete cell id from order array\r\n\t\t\t\tdraft.order = draft.order.filter((id) => id !== action.payload);\r\n\t\t\t\treturn draft;\r\n\r\n\t\t\tcase ActionType.MOVE_CELL:\r\n\t\t\t\tconst { direction } = action.payload;\r\n\t\t\t\t// index of cell\r\n\t\t\t\tconst index = draft.order.findIndex((id) => id === action.payload.id);\r\n\t\t\t\t// new index of cell depending on move direction\r\n\t\t\t\tconst targetId = direction === \"up\" ? index - 1 : index + 1;\r\n\t\t\t\t// ensure new index is within bounds of order array\r\n\t\t\t\tif (targetId < 0 || targetId > draft.order.length - 1) {\r\n\t\t\t\t\treturn draft;\r\n\t\t\t\t}\r\n\t\t\t\t// swap\r\n\t\t\t\tdraft.order[index] = draft.order[targetId];\r\n\t\t\t\tdraft.order[targetId] = action.payload.id;\r\n\t\t\t\treturn draft;\r\n\r\n\t\t\tcase ActionType.INSERT_CELL_AFTER:\r\n\t\t\t\tconst cell: Cell = {\r\n\t\t\t\t\tid: randomId(),\r\n\t\t\t\t\ttype: action.payload.type,\r\n\t\t\t\t\tcontent: \"\"\r\n\t\t\t\t};\r\n\t\t\t\t// insert cell into data array, which contains all the cells and their ids\r\n\t\t\t\tdraft.data[cell.id] = cell;\r\n\t\t\t\t// find index of cell to insert after\r\n\t\t\t\tconst foundIndex = draft.order.findIndex((id) => id === action.payload.id);\r\n\t\t\t\t// if index is -1 (means no index was found for that id), add cell to start of order array\r\n\t\t\t\tif (foundIndex === -1) {\r\n\t\t\t\t\tdraft.order.unshift(cell.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdraft.order.splice(foundIndex + 1, 0, cell.id);\r\n\t\t\t\t}\r\n\t\t\t\treturn draft;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn draft;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nconst randomId = () => {\r\n\treturn Math.random().toString(36).substr(2, 5);\r\n};\r\n\r\nexport default reducer;\r\n","import produce from \"immer\";\r\nimport { ActionType } from \"../action-types\";\r\nimport { Action } from \"../actions\";\r\n\r\ninterface BundlesState {\r\n\t[key: string]:\r\n\t\t| {\r\n\t\t\t\tloading: boolean;\r\n\t\t\t\tcode: string;\r\n\t\t\t\terr: string;\r\n\t\t\t}\r\n\t\t| undefined; // this is because, initially when a code cell is loaded up, there is no content inside which results in the createBundle action returning bundle as undefined, which in turn results in an error when previewing bundle.code beside the code cell\r\n}\r\n\r\nconst initialState: BundlesState = {};\r\n\r\nconst reducer = (state: BundlesState = initialState, action: Action): BundlesState => {\r\n\treturn produce(state, (draft) => {\r\n\t\tswitch (action.type) {\r\n\t\t\tcase ActionType.BUNDLE_START:\r\n\t\t\t\t// id of code cell to bundle\r\n\t\t\t\tdraft[action.payload.id] = {\r\n\t\t\t\t\tloading: true,\r\n\t\t\t\t\tcode: \"\",\r\n\t\t\t\t\terr: \"\"\r\n\t\t\t\t};\r\n\t\t\t\treturn draft;\r\n\r\n\t\t\tcase ActionType.BUNDLE_COMPLETE:\r\n\t\t\t\tdraft[action.payload.id] = {\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t\tcode: action.payload.bundle.code,\r\n\t\t\t\t\terr: action.payload.bundle.err\r\n\t\t\t\t};\r\n\t\t\t\treturn draft;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn draft;\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default reducer;\r\n","// export file for all reducers combined\r\nimport { combineReducers } from \"redux\";\r\nimport cellsReducer from \"./cellsReducer\";\r\nimport bundlesReducer from \"./bundlesReducer\";\r\n\r\nconst reducers = combineReducers({\r\n\tcells: cellsReducer,\r\n\tbundles: bundlesReducer\r\n});\r\n\r\nexport default reducers;\r\n\r\nexport type RootState = ReturnType<typeof reducers>;\r\n","// export file for redux store\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { ActionType } from \"./action-types\";\r\nimport reducers from \"./reducers\";\r\n\r\nexport const store = createStore(reducers, {}, applyMiddleware(thunk));\r\n\r\nstore.dispatch({\r\n\ttype: ActionType.INSERT_CELL_AFTER,\r\n\tpayload:\r\n\t\t{\r\n\t\t\tid: null,\r\n\t\t\ttype: \"text\"\r\n\t\t}\r\n});\r\nstore.dispatch({\r\n\ttype: ActionType.INSERT_CELL_AFTER,\r\n\tpayload:\r\n\t\t{\r\n\t\t\tid: null,\r\n\t\t\ttype: \"code\"\r\n\t\t}\r\n});\r\n","import * as esbuild from \"esbuild-wasm\";\r\nimport { unpkgPathPlugin } from \"./plugins/unpkg-path-plugin\";\r\nimport { fetchPlugin } from \"./plugins/fetch-plugin\";\r\n\r\n// to check if esbuild has been initialized\r\nlet service: boolean;\r\n\r\nconst bundle = async (rawCode: string) => {\r\n\twhile (!service) {\r\n\t\t// initialize esbuild\r\n\t\tawait esbuild.initialize({\r\n\t\t\tworker: true,\r\n\t\t\twasmURL: \"https://unpkg.com/esbuild-wasm/esbuild.wasm\"\r\n\t\t});\r\n\t\tservice = true;\r\n\t}\r\n\t// bundle code\r\n\ttry {\r\n\t\tconst result = await esbuild.build({\r\n\t\t\tentryPoints: [ \"index.js\" ],\r\n\t\t\tbundle: true,\r\n\t\t\twrite: false,\r\n\t\t\tplugins: [ unpkgPathPlugin(), fetchPlugin(rawCode) ],\r\n\t\t\tdefine:\r\n\t\t\t\t{\r\n\t\t\t\t\t\"process.env.NODE_ENV\": '\"production\"',\r\n\t\t\t\t\tglobal: \"window\"\r\n\t\t\t\t},\r\n\t\t\t// configure esbuild to use _React for the show() function to prevent naming collision with \"import React ...\"\r\n\t\t\tjsxFactory: \"_React.createElement\",\r\n\t\t\tjsxFragment: \"_React.Fragment\"\r\n\t\t});\r\n\t\treturn {\r\n\t\t\tcode: result.outputFiles[0].text,\r\n\t\t\terr: \"\"\r\n\t\t};\r\n\t} catch (err) {\r\n\t\tif (err instanceof Error) {\r\n\t\t\treturn {\r\n\t\t\t\tcode: \"\",\r\n\t\t\t\terr: err.message\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tcode: \"\",\r\n\t\t\t\terr: \"An error has occurred!\"\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default bundle;\r\n","import * as esbuild from \"esbuild-wasm\";\r\nimport axios from \"axios\";\r\nimport localforage from \"localforage\";\r\n\r\nconst fileCache = localforage.createInstance({\r\n\tname: \"filecache\"\r\n});\r\n\r\nexport const fetchPlugin = (inputCode: string) => {\r\n\treturn {\r\n\t\t// name is mainly to identify this plugin for debugging purposes\r\n\t\tname: \"fetch-plugin\",\r\n\t\tsetup(build: esbuild.PluginBuild) {\r\n\t\t\t// onLoad event listener (override esbuild's default file loading process)\r\n\r\n\t\t\t// handle root entry file of index.js\r\n\t\t\tbuild.onLoad({ filter: /(^index\\.js$)/ }, () => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tloader: \"jsx\",\r\n\t\t\t\t\tcontents: inputCode\r\n\t\t\t\t};\r\n\t\t\t});\r\n\r\n\t\t\t// handle check to see if file has already been fetched and if it is in the cache\r\n\t\t\tbuild.onLoad({ filter: /.*/ }, async (args: any) => {\r\n\t\t\t\tconst cachedResult = await fileCache.getItem<esbuild.OnLoadResult>(args.path);\r\n\t\t\t\t// If it is in the cache, return it immediately\r\n\t\t\t\tif (cachedResult) {\r\n\t\t\t\t\treturn cachedResult;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//handle css files\r\n\t\t\tbuild.onLoad({ filter: /(.css$)/ }, async (args: any) => {\r\n\t\t\t\tconst { data, request } = await axios.get(args.path);\r\n\t\t\t\t// workaround to get css files as esbuild does not support importing css files from js files as of now\r\n\t\t\t\t// comb through the css file to replace all new lines, single and double quotes\r\n\t\t\t\tconst escaped = data.replace(/\\n/g, \"\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\r\n\t\t\t\tconst contents = `\r\n\t\t\t\t\tconst style = document.createElement(\"style\");\r\n\t\t\t\t\tstyle.innerText = \"${escaped}\";\r\n\t\t\t\t\tdocument.head.appendChild(style);\r\n\t\t\t\t\t`;\r\n\t\t\t\tconst result: esbuild.OnLoadResult = {\r\n\t\t\t\t\tloader: \"jsx\",\r\n\t\t\t\t\tcontents: contents,\r\n\t\t\t\t\tresolveDir: new URL(\"./\", request.responseURL).pathname\r\n\t\t\t\t};\r\n\t\t\t\tawait fileCache.setItem(args.path, result);\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\r\n\t\t\t// handle all other files\r\n\t\t\tbuild.onLoad({ filter: /.*/ }, async (args: any) => {\r\n\t\t\t\tconst { data, request } = await axios.get(args.path);\r\n\t\t\t\tconst result: esbuild.OnLoadResult = {\r\n\t\t\t\t\tloader: \"jsx\",\r\n\t\t\t\t\tcontents: data,\r\n\t\t\t\t\tresolveDir: new URL(\"./\", request.responseURL).pathname\r\n\t\t\t\t};\r\n\t\t\t\tawait fileCache.setItem(args.path, result);\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};\r\n","import * as esbuild from \"esbuild-wasm\";\r\n\r\nexport const unpkgPathPlugin = () => {\r\n\treturn {\r\n\t\t// name is mainly to identify this plugin for debugging purposes\r\n\t\tname: \"unpkg-path-plugin\",\r\n\t\t// setup of bundling process\r\n\t\tsetup(build: esbuild.PluginBuild) {\r\n\t\t\t// onResolve event listener (override esbuild's default process of figuring out where the main file is stored)\r\n\t\t\t// can have multiple onResolve functions for different types of files, with the regex filter changing to look for the different types of files\r\n\t\t\t// return path to where the main file is stored (in this case, index.js as defined in the \"entry point\")\r\n\t\t\t// namespace is an \"identifier\" which can be used in onLoad to apply the onLoad function to only the files with the specified namespace\r\n\r\n\t\t\t// handle root entry file of index.js\r\n\t\t\tbuild.onResolve({ filter: /(^index\\.js$)/ }, () => {\r\n\t\t\t\treturn { path: \"index.js\", namespace: \"a\" };\r\n\t\t\t});\r\n\r\n\t\t\t// handle relative paths in a module\r\n\t\t\tbuild.onResolve({ filter: /^\\.+\\// }, async (args: any) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tnamespace: \"a\",\r\n\t\t\t\t\tpath: new URL(args.path, `https://unpkg.com${args.resolveDir}/`).href\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\t// handle main file of a module\r\n\t\t\tbuild.onResolve({ filter: /.*/ }, async (args: any) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tnamespace: \"a\",\r\n\t\t\t\t\tpath: `https://unpkg.com/${args.path}`\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};\r\n","import { Dispatch } from \"react\";\r\nimport { ActionType } from \"../action-types\";\r\nimport {\r\n\tAction,\r\n\tDirection,\r\n\tUpdateCellAction,\r\n\tDeleteCellAction,\r\n\tMoveCellAction,\r\n\tInsertCellAfterAction\r\n} from \"../actions\";\r\nimport { CellTypes } from \"../cell\";\r\nimport bundle from \"../../bundler\";\r\n\r\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\r\n\treturn {\r\n\t\ttype: ActionType.UPDATE_CELL,\r\n\t\tpayload:\r\n\t\t\t{\r\n\t\t\t\tid,\r\n\t\t\t\tcontent\r\n\t\t\t}\r\n\t};\r\n};\r\n\r\nexport const deleteCell = (id: string): DeleteCellAction => {\r\n\treturn {\r\n\t\ttype: ActionType.DELETE_CELL,\r\n\t\tpayload: id\r\n\t};\r\n};\r\n\r\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\r\n\treturn {\r\n\t\ttype: ActionType.MOVE_CELL,\r\n\t\tpayload:\r\n\t\t\t{\r\n\t\t\t\tid,\r\n\t\t\t\tdirection\r\n\t\t\t}\r\n\t};\r\n};\r\n\r\nexport const insertCellAfter = (id: string | null, cellType: CellTypes): InsertCellAfterAction => {\r\n\treturn {\r\n\t\ttype: ActionType.INSERT_CELL_AFTER,\r\n\t\tpayload:\r\n\t\t\t{\r\n\t\t\t\tid,\r\n\t\t\t\ttype: cellType\r\n\t\t\t}\r\n\t};\r\n};\r\n\r\nexport const createBundle = (id: string, input: string) => {\r\n\t// utilising redux thunk for bundling (async)\r\n\t// type annotation for dispatch is to make sure we only call dispatch with an actual action with a payload\r\n\treturn async (dispatch: Dispatch<Action>) => {\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.BUNDLE_START,\r\n\t\t\tpayload:\r\n\t\t\t\t{\r\n\t\t\t\t\tid\r\n\t\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst result = await bundle(input);\r\n\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.BUNDLE_COMPLETE,\r\n\t\t\tpayload:\r\n\t\t\t\t{\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tbundle: result\r\n\t\t\t\t}\r\n\t\t});\r\n\t};\r\n};\r\n","import { useSelector, TypedUseSelectorHook } from \"react-redux\";\r\nimport { RootState } from \"../state\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { useMemo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { actionCreators } from \"../state\";\r\n\r\nexport const useActions = () => {\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// useMemo is used here to only bind the action creators once, if not, in the code cell component, every time useActions is called, it will bind the action creators again resulting in a \"different\" createBundle which will cause the useEffect hook to run again, causing an infinite loop of the bundling process\r\n\treturn useMemo(\r\n\t\t() => {\r\n\t\t\treturn bindActionCreators(actionCreators, dispatch);\r\n\t\t},\r\n\t\t[ dispatch ]\r\n\t);\r\n};\r\n\r\n// bindActionCreators will return a dispatch wrapped function for each action creator so we can just utilise useActions() this way:\r\n\r\n// const { updateCell } = useActions()\r\n\r\n// updateCell({\r\n//     type: ...,\r\n//     payload: ...\r\n// })\r\n","import \"./add-cell.css\";\r\nimport { useActions } from \"../hooks/use-actions\";\r\nimport { Button, Icon, Divider } from \"semantic-ui-react\";\r\n\r\ninterface AddCellProps {\r\n\tpreviousCellId: string | null;\r\n\tforceVisible?: boolean;\r\n}\r\n\r\nconst AddCell = ({ previousCellId, forceVisible }: AddCellProps) => {\r\n\tconst { insertCellAfter } = useActions();\r\n\r\n\treturn (\r\n\t\t<Divider horizontal section>\r\n\t\t\t<Button.Group className={`add-cell ${forceVisible ? \"force-visible\" : \"\"}`} compact>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tanimated=\"fade\"\r\n\t\t\t\t\tclassName=\"add-cell-button\"\r\n\t\t\t\t\tonClick={() => insertCellAfter(previousCellId, \"code\")}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Button.Content visible>Code</Button.Content>\r\n\t\t\t\t\t<Button.Content hidden>\r\n\t\t\t\t\t\t<Icon name=\"add\" />\r\n\t\t\t\t\t</Button.Content>\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button\r\n\t\t\t\t\tanimated=\"fade\"\r\n\t\t\t\t\tclassName=\"add-cell-button\"\r\n\t\t\t\t\tonClick={() => insertCellAfter(previousCellId, \"text\")}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Button.Content visible>Text</Button.Content>\r\n\t\t\t\t\t<Button.Content hidden>\r\n\t\t\t\t\t\t<Icon name=\"add\" />\r\n\t\t\t\t\t</Button.Content>\r\n\t\t\t\t</Button>\r\n\t\t\t</Button.Group>\r\n\t\t</Divider>\r\n\t);\r\n};\r\n\r\nexport default AddCell;\r\n","import \"./action-bar.css\";\r\nimport { useActions } from \"../hooks/use-actions\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\ninterface ActionBarProps {\r\n\tid: string;\r\n}\r\n\r\nconst ActionBar = ({ id }: ActionBarProps) => {\r\n\tconst { moveCell, deleteCell } = useActions();\r\n\r\n\treturn (\r\n\t\t<Button.Group className=\"action-bar\">\r\n\t\t\t<Button className=\"action-bar-button\" icon=\"arrow up\" onClick={() => moveCell(id, \"up\")} />\r\n\t\t\t<Button className=\"action-bar-button\" icon=\"arrow down\" onClick={() => moveCell(id, \"down\")} />\r\n\t\t\t<Button className=\"action-bar-button\" icon=\"trash alternate\" onClick={() => deleteCell(id)} />\r\n\t\t</Button.Group>\r\n\t);\r\n};\r\n\r\nexport default ActionBar;\r\n","import \"./code-editor.css\";\r\nimport { useRef } from \"react\";\r\nimport Editor, { OnMount } from \"@monaco-editor/react\";\r\nimport prettier from \"prettier\";\r\nimport parser from \"prettier/parser-babel\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\n\r\ninterface EditorProps {\r\n\tinitialValue: string;\r\n\tonChange(value: string): void;\r\n}\r\n\r\nconst CodeEditor = ({ initialValue, onChange }: EditorProps) => {\r\n\tconst editorRef = useRef<any>(null);\r\n\r\n\tconst onEditorMount: OnMount = (editor, monaco) => {\r\n\t\teditorRef.current = editor;\r\n\t\teditor.onDidChangeModelContent(() => {\r\n\t\t\tonChange(editor.getValue());\r\n\t\t});\r\n\t};\r\n\r\n\tconst onFormatClick = () => {\r\n\t\t// get current value from editor instance\r\n\t\tconst unformatted = editorRef.current.getValue();\r\n\t\t// format that value\r\n\t\tconst formatted = prettier\r\n\t\t\t.format(unformatted, {\r\n\t\t\t\tparser: \"babel\",\r\n\t\t\t\tplugins: [ parser ],\r\n\t\t\t\tuseTabs: true,\r\n\t\t\t\tsemi: true\r\n\t\t\t})\r\n\t\t\t// remove new line added by prettier\r\n\t\t\t.replace(/\\n$/, \"\");\r\n\t\t// set formatted value back into the editor\r\n\t\teditorRef.current.setValue(formatted);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"editor-wrapper\">\r\n\t\t\t<Button icon animated=\"fade\" labelPosition=\"right\" className=\"button-format\" onClick={onFormatClick}>\r\n\t\t\t\t<Button.Content visible className=\"text-center\">\r\n\t\t\t\t\t<Icon name=\"paint brush\" />\r\n\t\t\t\t</Button.Content>\r\n\t\t\t\t<Button.Content hidden>Format</Button.Content>\r\n\t\t\t</Button>\r\n\t\t\t<Editor\r\n\t\t\t\tonMount={onEditorMount}\r\n\t\t\t\tvalue={initialValue}\r\n\t\t\t\ttheme=\"vs-dark\"\r\n\t\t\t\tlanguage=\"javascript\"\r\n\t\t\t\theight=\"100%\"\r\n\t\t\t\toptions={{\r\n\t\t\t\t\twordWrap: \"on\",\r\n\t\t\t\t\tminimap:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tenabled: false\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\tshowUnused: false,\r\n\t\t\t\t\tfolding: false,\r\n\t\t\t\t\tlineNumbersMinChars: 3,\r\n\t\t\t\t\tfontSize: 16,\r\n\t\t\t\t\tscrollBeyondLastLine: false,\r\n\t\t\t\t\tautomaticLayout: true\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CodeEditor;\r\n","import \"./preview.css\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\ninterface PreviewProps {\r\n\tcode: string;\r\n\tbundleError: string;\r\n}\r\n\r\n// setup event listener for message and eval the message (bundled code)\r\n// embed this as inner html in iframe using srcdoc attribute\r\nconst html = `\r\n    <html>\r\n        <head></head>\r\n        <body>\r\n            <div id=\"root\"></div>\r\n            <script>\r\n\t\t\t\tconst handleError = (err) => {\r\n\t\t\t\t\tconst root = document.getElementById(\"root\");\r\n\t\t\t\t\troot.innerHTML = '<div style=\"color: red;\"><h4>Runtime Error</h4>' + err + '</div>';\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t};\r\n\t\t\t\twindow.addEventListener(\"error\", (event) => {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\thandleError(event.error);\r\n\t\t\t\t});\r\n                window.addEventListener(\"message\", (event) => {\r\n                    try {\r\n                        eval(event.data);\r\n                    } catch (err) {\r\n                        handleError(err);\r\n                    }\r\n                }, false)\r\n            </script>\r\n        </body>\r\n    </html>\r\n`;\r\n\r\nconst Preview = ({ code, bundleError }: PreviewProps) => {\r\n\tconst iframe = useRef<any>();\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// update srcdoc of iframe to default state to prevent user from deleting html structure by any chance\r\n\t\t\tiframe.current.srcdoc = html;\r\n\t\t\t// slightly delay to allow update of srcdoc first\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\t// pass bundled code into iframe element via a ref\r\n\t\t\t\tiframe.current.contentWindow.postMessage(code, \"*\");\r\n\t\t\t}, 50);\r\n\t\t},\r\n\t\t[ code ]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"preview-wrapper\">\r\n\t\t\t<iframe title=\"code preview\" ref={iframe} sandbox=\"allow-scripts\" srcDoc={html} />\r\n\t\t\t{bundleError && (\r\n\t\t\t\t<div className=\"preview-error\">\r\n\t\t\t\t\t<h3>Compilation Error</h3>\r\n\t\t\t\t\t{bundleError}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Preview;\r\n","import \"./resizable.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { ResizableBox, ResizableBoxProps } from \"react-resizable\";\r\n\r\ninterface ResizableProps {\r\n\tdirection: \"horizontal\" | \"vertical\";\r\n\tchildren: React.ReactNode;\r\n}\r\n\r\nconst Resizable = ({ direction, children }: ResizableProps) => {\r\n\tconst [ innerWidth, setInnerWidth ] = useState(window.innerWidth);\r\n\tconst [ innerHeight, setInnerHeight ] = useState(window.innerHeight);\r\n\tconst [ width, setWidth ] = useState(window.innerWidth * 0.75);\r\n\tlet resizableAttr: ResizableBoxProps;\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// debounce\r\n\t\t\tlet timer: any;\r\n\t\t\tconst listener = () => {\r\n\t\t\t\tif (timer) {\r\n\t\t\t\t\tclearTimeout(timer);\r\n\t\t\t\t}\r\n\t\t\t\ttimer = setTimeout(() => {\r\n\t\t\t\t\t// update states with current window width and height\r\n\t\t\t\t\tsetInnerWidth(window.innerWidth);\r\n\t\t\t\t\tsetInnerHeight(window.innerHeight);\r\n\t\t\t\t\tif (window.innerWidth * 0.75 < width) {\r\n\t\t\t\t\t\tsetWidth(window.innerWidth * 0.75);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 100);\r\n\t\t\t};\r\n\t\t\twindow.addEventListener(\"resize\", listener);\r\n\t\t\t// cleanup\r\n\t\t\treturn () => {\r\n\t\t\t\twindow.removeEventListener(\"resize\", listener);\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ width ]\r\n\t);\r\n\r\n\tif (direction === \"horizontal\") {\r\n\t\tresizableAttr = {\r\n\t\t\tclassName: \"resize-horizontal\",\r\n\t\t\twidth,\r\n\t\t\theight: Infinity,\r\n\t\t\tresizeHandles: [ \"e\" ],\r\n\t\t\tmaxConstraints: [ innerWidth * 0.75, Infinity ],\r\n\t\t\tminConstraints: [ innerWidth * 0.2, Infinity ],\r\n\t\t\tonResizeStop:\r\n\t\t\t\t(event, data) => {\r\n\t\t\t\t\tsetWidth(data.size.width);\r\n\t\t\t\t}\r\n\t\t};\r\n\t} else {\r\n\t\tresizableAttr = {\r\n\t\t\twidth: Infinity,\r\n\t\t\theight: 400,\r\n\t\t\tresizeHandles: [ \"s\" ],\r\n\t\t\tmaxConstraints: [ Infinity, innerHeight * 0.9 ],\r\n\t\t\tminConstraints: [ Infinity, 100 ]\r\n\t\t};\r\n\t}\r\n\treturn <ResizableBox {...resizableAttr}>{children}</ResizableBox>;\r\n};\r\n\r\nexport default Resizable;\r\n","import \"./code-cell.css\";\r\nimport { useEffect } from \"react\";\r\nimport CodeEditor from \"./code-editor\";\r\nimport Preview from \"./preview\";\r\nimport Resizable from \"./resizable\";\r\nimport { Cell } from \"../state\";\r\nimport { useActions } from \"../hooks/use-actions\";\r\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\r\nimport { Loader, Segment } from \"semantic-ui-react\";\r\nimport { useCumulativeCode } from \"../hooks/use-cumulative-code\";\r\n\r\ninterface CodeCellProps {\r\n\tcell: Cell;\r\n}\r\n\r\nconst CodeCell = ({ cell }: CodeCellProps) => {\r\n\tconst { updateCell, createBundle } = useActions();\r\n\tconst bundle = useTypedSelector(state => state.bundles[cell.id]);\r\n\tconst cumulativeCode = useCumulativeCode(cell.id);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconst timer = setTimeout(async () => {\r\n\t\t\t\tcreateBundle(cell.id, cumulativeCode);\r\n\t\t\t}, 750);\r\n\r\n\t\t\treturn () => {\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t};\r\n\t\t},\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t\t[ cell.id, cumulativeCode, createBundle ]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<Resizable direction=\"vertical\">\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\theight: \"calc(100% - 10px)\",\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tflexDirection: \"row\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Resizable direction=\"horizontal\">\r\n\t\t\t\t\t<CodeEditor\r\n\t\t\t\t\t\tinitialValue={cell.content}\r\n\t\t\t\t\t\tonChange={value => updateCell(cell.id, value)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Resizable>\r\n\t\t\t\t{!bundle || bundle.loading ? (\r\n\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t<Loader active indeterminate>\r\n\t\t\t\t\t\t\tLoading...\r\n\t\t\t\t\t\t</Loader>\r\n\t\t\t\t\t</Segment>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Preview code={bundle.code} bundleError={bundle.err} />\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t{/* <Segment>\r\n\t\t\t\t<Loader active indeterminate>\r\n\t\t\t\t\tLoading...\r\n\t\t\t\t</Loader>\r\n\t\t\t</Segment> */}\r\n\t\t</Resizable>\r\n\t);\r\n};\r\n\r\nexport default CodeCell;\r\n","import { useTypedSelector } from \"./use-typed-selector\";\r\n\r\nexport const useCumulativeCode = (cellId: string) => {\r\n\treturn useTypedSelector((state) => {\r\n\t\t// destructure data and order array from state\r\n\t\tconst { data, order } = state.cells;\r\n\t\t// map over each cell id from order array and return corresponding cell from data array\r\n\t\tconst orderedCells = order.map((id) => data[id]);\r\n\t\tconst showFunc = `\r\n        import _React from \"react\";\r\n        import _ReactDOM from \"react-dom\";\r\n        var show = (value) => {\r\n            const root = document.getElementById(\"root\");\r\n            if (typeof value === \"object\") {\r\n                if (value.$$typeof && value.props) {\r\n                    _ReactDOM.render(value, root)\r\n                } else {\r\n                    root.innerHTML = JSON.stringify(value)\r\n                }\r\n            } else {\r\n                root.innerHTML = value;\r\n            }\r\n        };\r\n        `;\r\n\t\tconst showFuncNoOp = \"var show = () => {}\";\r\n\t\tconst cumulativeCode = [];\r\n\t\tfor (let c of orderedCells) {\r\n\t\t\tif (c.type === \"code\") {\r\n\t\t\t\t// if the id is the current cell's id, which is the cell that the user wants to execute, then push the usuable show function to cumulativeCode\r\n\t\t\t\tif (c.id === cellId) {\r\n\t\t\t\t\tcumulativeCode.push(showFunc);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcumulativeCode.push(showFuncNoOp);\r\n\t\t\t\t}\r\n\t\t\t\tcumulativeCode.push(c.content);\r\n\t\t\t}\r\n\t\t\tif (c.id === cellId) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cumulativeCode;\r\n\t}).join(\"\\n\");\r\n};\r\n","import \"./text-editor.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport MDEditor from \"@uiw/react-md-editor\";\r\nimport { Segment } from \"semantic-ui-react\";\r\nimport { Cell } from \"../state\";\r\nimport { useActions } from \"../hooks/use-actions\";\r\n\r\ninterface TextEditorProps {\r\n\tcell: Cell;\r\n}\r\n\r\nconst TextEditor = ({ cell }: TextEditorProps) => {\r\n\tconst ref = useRef<HTMLDivElement | null>(null);\r\n\tconst [ editing, setEditing ] = useState(false);\r\n\tconst { updateCell } = useActions();\r\n\r\n\tuseEffect(() => {\r\n\t\tconst listener = (event: MouseEvent) => {\r\n\t\t\tif (ref.current && event.target && ref.current.contains(event.target as Node)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsetEditing(false);\r\n\t\t};\r\n\t\tdocument.addEventListener(\"click\", listener, { capture: true });\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener(\"click\", listener, { capture: true });\r\n\t\t};\r\n\t}, []);\r\n\r\n\tif (editing) {\r\n\t\treturn (\r\n\t\t\t<div className=\"text-editor\" ref={ref}>\r\n\t\t\t\t<MDEditor value={cell.content} onChange={(value) => updateCell(cell.id, value || \"\")} autoFocus />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Segment className=\"text-editor\" onClick={() => setEditing(true)}>\r\n\t\t\t<div className=\"card-content\">\r\n\t\t\t\t<MDEditor.Markdown source={cell.content || \"*Click to edit*\"} />\r\n\t\t\t</div>\r\n\t\t</Segment>\r\n\t);\r\n};\r\n\r\nexport default TextEditor;\r\n","import \"./cell-list-item.css\";\r\nimport { Cell } from \"../state\";\r\nimport ActionBar from \"./action-bar\";\r\nimport CodeCell from \"./code-cell\";\r\nimport TextEditor from \"./text-editor\";\r\n\r\ninterface CellListItemProps {\r\n\tcell: Cell;\r\n}\r\nconst CellListItem = ({ cell }: CellListItemProps) => {\r\n\treturn (\r\n\t\t<div className=\"cell-list-item\">\r\n\t\t\t<div className=\"action-bar-wrapper\">\r\n\t\t\t\t<ActionBar id={cell.id} />\r\n\t\t\t</div>\r\n\t\t\t{cell.type === \"code\" ? <CodeCell cell={cell} /> : <TextEditor cell={cell} />}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CellListItem;\r\n","import \"./cell-list.css\";\r\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\r\nimport AddCell from \"./add-cell\";\r\nimport CellListItem from \"./cell-list-item\";\r\n\r\nconst CellList = () => {\r\n\t// extract state.cells.order and .data from store\r\n\t// map over each cell id in order array and return the corresponding cells from data\r\n\t// cells variable is an array of cells in order\r\n\tconst cells = useTypedSelector(({ cells: { order, data } }) => order.map((id) => data[id]));\r\n\t// map over each cell in cells, and render a CellListItem for each cell\r\n\tconst renderedCells = cells.map((cell) => {\r\n\t\treturn (\r\n\t\t\t<div key={cell.id}>\r\n\t\t\t\t<CellListItem cell={cell} />\r\n\t\t\t\t<AddCell previousCellId={cell.id} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"cell-list\">\r\n\t\t\t<AddCell forceVisible={cells.length === 0} previousCellId={null} />\r\n\t\t\t{renderedCells}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CellList;\r\n","import \"semantic-ui-css/semantic.min.css\";\r\nimport \"./index.css\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state\";\r\nimport CellList from \"./components/cell-list\";\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<div>\r\n\t\t\t\t<CellList />\r\n\t\t\t</div>\r\n\t\t</Provider>\r\n\t);\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}