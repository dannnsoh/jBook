{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Ryzen/Desktop/jbook/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Ryzen/Desktop/jbook/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export var unpkgPathPlugin=function unpkgPathPlugin(){return{// name is mainly to identify this plugin for debugging purposes\nname:\"unpkg-path-plugin\",// setup of bundling process\nsetup:function setup(build){// onResolve event listener (override esbuild's default process of figuring out where the main file is stored)\n// can have multiple onResolve functions for different types of files, with the regex filter changing to look for the different types of files\n// return path to where the main file is stored (in this case, index.js as defined in the \"entry point\")\n// namespace is an \"identifier\" which can be used in onLoad to apply the onLoad function to only the files with the specified namespace\n// handle root entry file of index.js\nbuild.onResolve({filter:/(^index\\.js$)/},function(){return{path:\"index.js\",namespace:\"a\"};});// handle relative paths in a module\nbuild.onResolve({filter:/^\\.+\\//},/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(args){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",{namespace:\"a\",path:new URL(args.path,\"https://unpkg.com\".concat(args.resolveDir,\"/\")).href});case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());// handle main file of a module\nbuild.onResolve({filter:/.*/},/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(args){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",{namespace:\"a\",path:\"https://unpkg.com/\".concat(args.path)});case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());}};};","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/packages/local-client/src/bundler/plugins/unpkg-path-plugin.ts"],"names":["unpkgPathPlugin","name","setup","build","onResolve","filter","path","namespace","args","URL","resolveDir","href"],"mappings":"+UAEA,MAAO,IAAMA,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CACpC,MAAO,CACN;AACAC,IAAI,CAAE,mBAFA,CAGN;AACAC,KAJM,gBAIAC,KAJA,CAI4B,CACjC;AACA;AACA;AACA;AAEA;AACAA,KAAK,CAACC,SAAN,CAAgB,CAAEC,MAAM,CAAE,eAAV,CAAhB,CAA6C,UAAM,CAClD,MAAO,CAAEC,IAAI,CAAE,UAAR,CAAoBC,SAAS,CAAE,GAA/B,CAAP,CACA,CAFD,EAIA;AACAJ,KAAK,CAACC,SAAN,CAAgB,CAAEC,MAAM,CAAE,QAAV,CAAhB,0FAAsC,iBAAOG,IAAP,kJAC9B,CACND,SAAS,CAAE,GADL,CAEND,IAAI,CAAE,GAAIG,CAAAA,GAAJ,CAAQD,IAAI,CAACF,IAAb,4BAAuCE,IAAI,CAACE,UAA5C,OAA2DC,IAF3D,CAD8B,wDAAtC,gEAMA;AACAR,KAAK,CAACC,SAAN,CAAgB,CAAEC,MAAM,CAAE,IAAV,CAAhB,2FAAkC,kBAAOG,IAAP,uJAC1B,CACND,SAAS,CAAE,GADL,CAEND,IAAI,6BAAuBE,IAAI,CAACF,IAA5B,CAFE,CAD0B,0DAAlC,kEAMA,CA7BK,CAAP,CA+BA,CAhCM","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\r\n\r\nexport const unpkgPathPlugin = () => {\r\n\treturn {\r\n\t\t// name is mainly to identify this plugin for debugging purposes\r\n\t\tname: \"unpkg-path-plugin\",\r\n\t\t// setup of bundling process\r\n\t\tsetup(build: esbuild.PluginBuild) {\r\n\t\t\t// onResolve event listener (override esbuild's default process of figuring out where the main file is stored)\r\n\t\t\t// can have multiple onResolve functions for different types of files, with the regex filter changing to look for the different types of files\r\n\t\t\t// return path to where the main file is stored (in this case, index.js as defined in the \"entry point\")\r\n\t\t\t// namespace is an \"identifier\" which can be used in onLoad to apply the onLoad function to only the files with the specified namespace\r\n\r\n\t\t\t// handle root entry file of index.js\r\n\t\t\tbuild.onResolve({ filter: /(^index\\.js$)/ }, () => {\r\n\t\t\t\treturn { path: \"index.js\", namespace: \"a\" };\r\n\t\t\t});\r\n\r\n\t\t\t// handle relative paths in a module\r\n\t\t\tbuild.onResolve({ filter: /^\\.+\\// }, async (args: any) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tnamespace: \"a\",\r\n\t\t\t\t\tpath: new URL(args.path, `https://unpkg.com${args.resolveDir}/`).href\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\t// handle main file of a module\r\n\t\t\tbuild.onResolve({ filter: /.*/ }, async (args: any) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tnamespace: \"a\",\r\n\t\t\t\t\tpath: `https://unpkg.com/${args.path}`\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}