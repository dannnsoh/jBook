{"ast":null,"code":"import { ActionType } from \"../action-types\";\nimport bundle from \"../../bundler\";\nexport const updateCell = (id, content) => {\n  return {\n    type: ActionType.UPDATE_CELL,\n    payload: {\n      id,\n      content\n    }\n  };\n};\nexport const deleteCell = id => {\n  return {\n    type: ActionType.DELETE_CELL,\n    payload: id\n  };\n};\nexport const moveCell = (id, direction) => {\n  return {\n    type: ActionType.MOVE_CELL,\n    payload: {\n      id,\n      direction\n    }\n  };\n};\nexport const insertCellAfter = (id, cellType) => {\n  return {\n    type: ActionType.INSERT_CELL_AFTER,\n    payload: {\n      id,\n      type: cellType\n    }\n  };\n};\nexport const createBundle = (id, input) => {\n  // utilising redux thunk for bundling (async)\n  // type annotation for dispatch is to make sure we only call dispatch with an actual action with a payload\n  return async dispatch => {\n    dispatch({\n      type: ActionType.BUNDLE_START,\n      payload: {\n        id\n      }\n    });\n    const result = await bundle(input);\n    dispatch({\n      type: ActionType.BUNDLE_COMPLETE,\n      payload: {\n        id,\n        bundle: result\n      }\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/src/state/action-creators/index.ts"],"names":["ActionType","bundle","updateCell","id","content","type","UPDATE_CELL","payload","deleteCell","DELETE_CELL","moveCell","direction","MOVE_CELL","insertCellAfter","cellType","INSERT_CELL_AFTER","createBundle","input","dispatch","BUNDLE_START","result","BUNDLE_COMPLETE"],"mappings":"AACA,SAASA,UAAT,QAA2B,iBAA3B;AAYA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAaC,OAAb,KAAmD;AAC5E,SAAO;AACNC,IAAAA,IAAI,EAAEL,UAAU,CAACM,WADX;AAENC,IAAAA,OAAO,EACN;AACCJ,MAAAA,EADD;AAECC,MAAAA;AAFD;AAHK,GAAP;AAQA,CATM;AAWP,OAAO,MAAMI,UAAU,GAAIL,EAAD,IAAkC;AAC3D,SAAO;AACNE,IAAAA,IAAI,EAAEL,UAAU,CAACS,WADX;AAENF,IAAAA,OAAO,EAAEJ;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAMO,QAAQ,GAAG,CAACP,EAAD,EAAaQ,SAAb,KAAsD;AAC7E,SAAO;AACNN,IAAAA,IAAI,EAAEL,UAAU,CAACY,SADX;AAENL,IAAAA,OAAO,EACN;AACCJ,MAAAA,EADD;AAECQ,MAAAA;AAFD;AAHK,GAAP;AAQA,CATM;AAWP,OAAO,MAAME,eAAe,GAAG,CAACV,EAAD,EAAoBW,QAApB,KAAmE;AACjG,SAAO;AACNT,IAAAA,IAAI,EAAEL,UAAU,CAACe,iBADX;AAENR,IAAAA,OAAO,EACN;AACCJ,MAAAA,EADD;AAECE,MAAAA,IAAI,EAAES;AAFP;AAHK,GAAP;AAQA,CATM;AAWP,OAAO,MAAME,YAAY,GAAG,CAACb,EAAD,EAAac,KAAb,KAA+B;AAC1D;AACA;AACA,SAAO,MAAOC,QAAP,IAAsC;AAC5CA,IAAAA,QAAQ,CAAC;AACRb,MAAAA,IAAI,EAAEL,UAAU,CAACmB,YADT;AAERZ,MAAAA,OAAO,EACN;AACCJ,QAAAA;AADD;AAHO,KAAD,CAAR;AAOA,UAAMiB,MAAM,GAAG,MAAMnB,MAAM,CAACgB,KAAD,CAA3B;AACAC,IAAAA,QAAQ,CAAC;AACRb,MAAAA,IAAI,EAAEL,UAAU,CAACqB,eADT;AAERd,MAAAA,OAAO,EACN;AACCJ,QAAAA,EADD;AAECF,QAAAA,MAAM,EAAEmB;AAFT;AAHO,KAAD,CAAR;AAQA,GAjBD;AAkBA,CArBM","sourcesContent":["import { Dispatch } from \"react\";\r\nimport { ActionType } from \"../action-types\";\r\nimport {\r\n\tAction,\r\n\tDirection,\r\n\tUpdateCellAction,\r\n\tDeleteCellAction,\r\n\tMoveCellAction,\r\n\tInsertCellAfterAction,\r\n\tBundleStartAction,\r\n\tBundleCompleteAction\r\n} from \"../actions\";\r\nimport { CellTypes } from \"../cell\";\r\nimport bundle from \"../../bundler\";\r\n\r\nexport const updateCell = (id: string, content: string): UpdateCellAction => {\r\n\treturn {\r\n\t\ttype: ActionType.UPDATE_CELL,\r\n\t\tpayload:\r\n\t\t\t{\r\n\t\t\t\tid,\r\n\t\t\t\tcontent\r\n\t\t\t}\r\n\t};\r\n};\r\n\r\nexport const deleteCell = (id: string): DeleteCellAction => {\r\n\treturn {\r\n\t\ttype: ActionType.DELETE_CELL,\r\n\t\tpayload: id\r\n\t};\r\n};\r\n\r\nexport const moveCell = (id: string, direction: Direction): MoveCellAction => {\r\n\treturn {\r\n\t\ttype: ActionType.MOVE_CELL,\r\n\t\tpayload:\r\n\t\t\t{\r\n\t\t\t\tid,\r\n\t\t\t\tdirection\r\n\t\t\t}\r\n\t};\r\n};\r\n\r\nexport const insertCellAfter = (id: string | null, cellType: CellTypes): InsertCellAfterAction => {\r\n\treturn {\r\n\t\ttype: ActionType.INSERT_CELL_AFTER,\r\n\t\tpayload:\r\n\t\t\t{\r\n\t\t\t\tid,\r\n\t\t\t\ttype: cellType\r\n\t\t\t}\r\n\t};\r\n};\r\n\r\nexport const createBundle = (id: string, input: string) => {\r\n\t// utilising redux thunk for bundling (async)\r\n\t// type annotation for dispatch is to make sure we only call dispatch with an actual action with a payload\r\n\treturn async (dispatch: Dispatch<Action>) => {\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.BUNDLE_START,\r\n\t\t\tpayload:\r\n\t\t\t\t{\r\n\t\t\t\t\tid\r\n\t\t\t\t}\r\n\t\t});\r\n\t\tconst result = await bundle(input);\r\n\t\tdispatch({\r\n\t\t\ttype: ActionType.BUNDLE_COMPLETE,\r\n\t\t\tpayload:\r\n\t\t\t\t{\r\n\t\t\t\t\tid,\r\n\t\t\t\t\tbundle: result\r\n\t\t\t\t}\r\n\t\t});\r\n\t};\r\n};\r\n"]},"metadata":{},"sourceType":"module"}