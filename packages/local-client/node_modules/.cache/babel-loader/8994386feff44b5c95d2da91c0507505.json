{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/Ryzen/Desktop/jbook/packages/local-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{useTypedSelector}from\"./use-typed-selector\";export var useCumulativeCode=function useCumulativeCode(cellId){return useTypedSelector(function(state){// destructure data and order array from state\nvar _state$cells=state.cells,data=_state$cells.data,order=_state$cells.order;// map over each cell id from order array and return corresponding cell from data array\nvar orderedCells=order.map(function(id){return data[id];});var showFunc=\"\\n        import _React from \\\"react\\\";\\n        import _ReactDOM from \\\"react-dom\\\";\\n        var show = (value) => {\\n            const root = document.getElementById(\\\"root\\\");\\n            if (typeof value === \\\"object\\\") {\\n                if (value.$$typeof && value.props) {\\n                    _ReactDOM.render(value, root)\\n                } else {\\n                    root.innerHTML = JSON.stringify(value)\\n                }\\n            } else {\\n                root.innerHTML = value;\\n            }\\n        };\\n        \";var showFuncNoOp=\"var show = () => {}\";var cumulativeCode=[];var _iterator=_createForOfIteratorHelper(orderedCells),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var c=_step.value;if(c.type===\"code\"){// if the id is the current cell's id, which is the cell that the user wants to execute, then push the usuable show function to cumulativeCode\nif(c.id===cellId){cumulativeCode.push(showFunc);}else{cumulativeCode.push(showFuncNoOp);}cumulativeCode.push(c.content);}if(c.id===cellId){break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return cumulativeCode;}).join(\"\\n\");};","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/packages/local-client/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","cells","data","order","orderedCells","map","id","showFunc","showFuncNoOp","cumulativeCode","c","type","push","content","join"],"mappings":"iMAAA,OAASA,gBAAT,KAAiC,sBAAjC,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAAoB,CACpD,MAAOF,CAAAA,gBAAgB,CAAC,SAACG,KAAD,CAAW,CAClC;AACA,iBAAwBA,KAAK,CAACC,KAA9B,CAAQC,IAAR,cAAQA,IAAR,CAAcC,KAAd,cAAcA,KAAd,CACA;AACA,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,GAAN,CAAU,SAACC,EAAD,QAAQJ,CAAAA,IAAI,CAACI,EAAD,CAAZ,EAAV,CAArB,CACA,GAAMC,CAAAA,QAAQ,4hBAAd,CAgBA,GAAMC,CAAAA,YAAY,CAAG,qBAArB,CACA,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CAtBkC,yCAuBpBL,YAvBoB,YAuBlC,+CAA4B,IAAnBM,CAAAA,CAAmB,aAC3B,GAAIA,CAAC,CAACC,IAAF,GAAW,MAAf,CAAuB,CACtB;AACA,GAAID,CAAC,CAACJ,EAAF,GAASP,MAAb,CAAqB,CACpBU,cAAc,CAACG,IAAf,CAAoBL,QAApB,EACA,CAFD,IAEO,CACNE,cAAc,CAACG,IAAf,CAAoBJ,YAApB,EACA,CACDC,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB,EACA,CACD,GAAIH,CAAC,CAACJ,EAAF,GAASP,MAAb,CAAqB,CACpB,MACA,CACD,CApCiC,qDAqClC,MAAOU,CAAAA,cAAP,CACA,CAtCsB,CAAhB,CAsCJK,IAtCI,CAsCC,IAtCD,CAAP,CAuCA,CAxCM","sourcesContent":["import { useTypedSelector } from \"./use-typed-selector\";\r\n\r\nexport const useCumulativeCode = (cellId: string) => {\r\n\treturn useTypedSelector((state) => {\r\n\t\t// destructure data and order array from state\r\n\t\tconst { data, order } = state.cells;\r\n\t\t// map over each cell id from order array and return corresponding cell from data array\r\n\t\tconst orderedCells = order.map((id) => data[id]);\r\n\t\tconst showFunc = `\r\n        import _React from \"react\";\r\n        import _ReactDOM from \"react-dom\";\r\n        var show = (value) => {\r\n            const root = document.getElementById(\"root\");\r\n            if (typeof value === \"object\") {\r\n                if (value.$$typeof && value.props) {\r\n                    _ReactDOM.render(value, root)\r\n                } else {\r\n                    root.innerHTML = JSON.stringify(value)\r\n                }\r\n            } else {\r\n                root.innerHTML = value;\r\n            }\r\n        };\r\n        `;\r\n\t\tconst showFuncNoOp = \"var show = () => {}\";\r\n\t\tconst cumulativeCode = [];\r\n\t\tfor (let c of orderedCells) {\r\n\t\t\tif (c.type === \"code\") {\r\n\t\t\t\t// if the id is the current cell's id, which is the cell that the user wants to execute, then push the usuable show function to cumulativeCode\r\n\t\t\t\tif (c.id === cellId) {\r\n\t\t\t\t\tcumulativeCode.push(showFunc);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcumulativeCode.push(showFuncNoOp);\r\n\t\t\t\t}\r\n\t\t\t\tcumulativeCode.push(c.content);\r\n\t\t\t}\r\n\t\t\tif (c.id === cellId) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cumulativeCode;\r\n\t}).join(\"\\n\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}