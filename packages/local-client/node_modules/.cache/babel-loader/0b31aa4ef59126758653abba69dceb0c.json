{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryzen\\\\Desktop\\\\jbook\\\\src\\\\components\\\\cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport AddCell from \"./add-cell\";\nimport CellListItem from \"./cell-list-item\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellList = () => {\n  _s();\n\n  // extract state.cells.order and .data from store, map over each cell id in order array and return the corresponding cells from data\n  // cells variable is an array of cells in order\n  const cells = useTypedSelector(_ref => {\n    let {\n      cells: {\n        order,\n        data\n      }\n    } = _ref;\n    return order.map(id => data[id]);\n  }); // map over each cell in cells, and render a CellListItem for each cell\n\n  const renderedCells = cells.map(cell => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AddCell, {\n        nextCellId: cell.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(CellListItem, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, this)]\n    }, cell.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [renderedCells, /*#__PURE__*/_jsxDEV(AddCell, {\n      nextCellId: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CellList, \"ij3ho+NMbIxaBKnXgl+evU0tiZI=\", false, function () {\n  return [useTypedSelector];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/src/components/cell-list.tsx"],"names":["useTypedSelector","AddCell","CellListItem","CellList","cells","order","data","map","id","renderedCells","cell"],"mappings":";;;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB;AACA;AACA,QAAMC,KAAK,GAAGJ,gBAAgB,CAAC;AAAA,QAAC;AAAEI,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAT,KAAD;AAAA,WAAgCD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQF,IAAI,CAACE,EAAD,CAAtB,CAAhC;AAAA,GAAD,CAA9B,CAHsB,CAItB;;AACA,QAAMC,aAAa,GAAGL,KAAK,CAACG,GAAN,CAAWG,IAAD,IAAU;AACzC,wBACC;AAAA,8BACC,QAAC,OAAD;AAAS,QAAA,UAAU,EAAEA,IAAI,CAACF;AAA1B;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,YAAD;AAAc,QAAA,IAAI,EAAEE;AAApB;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA,OAAUA,IAAI,CAACF,EAAf;AAAA;AAAA;AAAA;AAAA,YADD;AAMA,GAPqB,CAAtB;AASA,sBACC;AAAA,eACEC,aADF,eAEC,QAAC,OAAD;AAAS,MAAA,UAAU,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAMA,CApBD;;GAAMN,Q;UAGSH,gB;;;KAHTG,Q;AAsBN,eAAeA,QAAf","sourcesContent":["import { useTypedSelector } from \"../hooks/use-typed-selector\";\r\nimport AddCell from \"./add-cell\";\r\nimport CellListItem from \"./cell-list-item\";\r\n\r\nconst CellList = () => {\r\n\t// extract state.cells.order and .data from store, map over each cell id in order array and return the corresponding cells from data\r\n\t// cells variable is an array of cells in order\r\n\tconst cells = useTypedSelector(({ cells: { order, data } }) => order.map((id) => data[id]));\r\n\t// map over each cell in cells, and render a CellListItem for each cell\r\n\tconst renderedCells = cells.map((cell) => {\r\n\t\treturn (\r\n\t\t\t<div key={cell.id}>\r\n\t\t\t\t<AddCell nextCellId={cell.id} />\r\n\t\t\t\t<CellListItem cell={cell} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{renderedCells}\r\n\t\t\t<AddCell nextCellId={null} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CellList;\r\n"]},"metadata":{},"sourceType":"module"}