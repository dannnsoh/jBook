{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nvar _excluded = [\"prefixCls\", \"className\", \"onScroll\", \"renderTextarea\"];\nimport React, { useEffect, Fragment, useContext } from 'react';\nimport { EditorContext } from '../../Context';\nimport shortcuts from './shortcuts';\nimport Markdown from './Markdown';\nimport Textarea from './Textarea';\nimport { TextAreaCommandOrchestrator } from '../../commands';\nimport \"./index.css\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function TextArea(props) {\n  var _ref = props || {},\n      {\n    prefixCls,\n    className,\n    onScroll,\n    renderTextarea\n  } = _ref,\n      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var {\n    markdown,\n    scrollTop,\n    commands,\n    extraCommands,\n    onChange,\n    dispatch\n  } = useContext(EditorContext);\n  var textRef = React.useRef(null);\n  var executeRef = React.useRef();\n  var warp = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    var state = {};\n\n    if (warp.current) {\n      state.textareaWarp = warp.current || undefined;\n      warp.current.scrollTop = scrollTop || 0;\n    }\n\n    if (dispatch) {\n      dispatch(_extends({}, state));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      var _commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n\n      executeRef.current = _commandOrchestrator;\n      dispatch({\n        textarea: textRef.current,\n        commandOrchestrator: _commandOrchestrator\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: warp,\n    className: prefixCls + \"-aree \" + (className || ''),\n    onScroll: onScroll,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: prefixCls + \"-text\",\n      children: renderTextarea ? /*#__PURE__*/React.cloneElement(renderTextarea(_extends({}, otherProps, {\n        value: markdown,\n        autoComplete: 'off',\n        autoCorrect: 'off',\n        spellCheck: 'false',\n        autoCapitalize: 'off',\n        className: prefixCls + \"-text-input\",\n        style: {\n          WebkitTextFillColor: 'inherit',\n          overflow: 'auto'\n        }\n      }), {\n        dispatch,\n        onChange,\n        shortcuts,\n        useContext: {\n          commands,\n          extraCommands,\n          commandOrchestrator: executeRef.current\n        }\n      }), {\n        ref: textRef\n      }) : /*#__PURE__*/_jsxs(Fragment, {\n        children: [/*#__PURE__*/_jsx(Markdown, {\n          prefixCls: prefixCls\n        }), /*#__PURE__*/_jsx(Textarea, _extends({\n          prefixCls: prefixCls\n        }, otherProps))]\n      })\n    })\n  });\n}","map":{"version":3,"sources":["../../../src/components/TextArea/index.tsx"],"names":["renderTextarea","otherProps","props","dispatch","useContext","textRef","React","executeRef","warp","useEffect","state","scrollTop","commandOrchestrator","textarea","prefixCls","className","value","autoComplete","autoCorrect","spellCheck","autoCapitalize","style","WebkitTextFillColor","overflow","current","ref"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useContext } from 'react';\nimport { EditorContext, ContextStore, ExecuteCommandState } from '../../Context';\nimport shortcuts from './shortcuts';\nimport Markdown from './Markdown';\nimport Textarea from './Textarea';\nimport { MDEditorProps, IProps } from '../../Editor';\nimport { TextAreaCommandOrchestrator, ICommand } from '../../commands';\nimport './index.less';\n\ntype RenderTextareaHandle = {\n  dispatch: ContextStore['dispatch'];\n  onChange?: MDEditorProps['onChange'];\n  useContext?: {\n    commands: ContextStore['commands'];\n    extraCommands: ContextStore['extraCommands'];\n    commandOrchestrator?: TextAreaCommandOrchestrator;\n  };\n  shortcuts?: (\n    e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>,\n    commands: ICommand[],\n    commandOrchestrator?: TextAreaCommandOrchestrator,\n    dispatch?: React.Dispatch<ContextStore>,\n    state?: ExecuteCommandState,\n  ) => void;\n};\n\nexport interface ITextAreaProps\n  extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange' | 'onScroll'>,\n    IProps {\n  value?: string;\n  onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;\n  renderTextarea?: (\n    props: React.TextareaHTMLAttributes<HTMLTextAreaElement> | React.HTMLAttributes<HTMLDivElement>,\n    opts: RenderTextareaHandle,\n  ) => JSX.Element;\n}\n\nexport type TextAreaRef = {\n  text?: HTMLTextAreaElement;\n  warp?: HTMLDivElement;\n};\n\nexport default function TextArea(props: ITextAreaProps) {\n  const { prefixCls, className, onScroll, renderTextarea, ...otherProps } = props || {};\n  const { markdown, scrollTop, commands, extraCommands, onChange, dispatch } = useContext(EditorContext);\n  const textRef = React.useRef<HTMLTextAreaElement>(null);\n  const executeRef = React.useRef<TextAreaCommandOrchestrator>();\n  const warp = React.createRef<HTMLDivElement>();\n  useEffect(() => {\n    const state: ContextStore = {};\n    if (warp.current) {\n      state.textareaWarp = warp.current || undefined;\n      warp.current.scrollTop = scrollTop || 0;\n    }\n    if (dispatch) {\n      dispatch({ ...state });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (textRef.current && dispatch) {\n      const commandOrchestrator = new TextAreaCommandOrchestrator(textRef.current);\n      executeRef.current = commandOrchestrator;\n      dispatch({ textarea: textRef.current, commandOrchestrator });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div ref={warp} className={`${prefixCls}-aree ${className || ''}`} onScroll={onScroll}>\n      <div className={`${prefixCls}-text`}>\n        {renderTextarea ? (\n          React.cloneElement(\n            renderTextarea(\n              {\n                ...otherProps,\n                value: markdown,\n                autoComplete: 'off',\n                autoCorrect: 'off',\n                spellCheck: 'false',\n                autoCapitalize: 'off',\n                className: `${prefixCls}-text-input`,\n                style: {\n                  WebkitTextFillColor: 'inherit',\n                  overflow: 'auto',\n                },\n              },\n              {\n                dispatch,\n                onChange,\n                shortcuts,\n                useContext: { commands, extraCommands, commandOrchestrator: executeRef.current },\n              },\n            ),\n            {\n              ref: textRef,\n            },\n          )\n        ) : (\n          <Fragment>\n            <Markdown prefixCls={prefixCls} />\n            <Textarea prefixCls={prefixCls} {...otherProps} />\n          </Fragment>\n        )}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}