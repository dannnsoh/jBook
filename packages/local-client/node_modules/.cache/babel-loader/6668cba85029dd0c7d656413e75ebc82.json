{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryzen\\\\Desktop\\\\jbook\\\\src\\\\components\\\\preview.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./preview.css\";\nimport { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// setup event listener for message and eval the message (bundled code)\n// embed this as inner html in iframe using srcdoc attribute\nconst html = `\n    <html>\n        <head></head>\n        <body>\n            <div id=\"root\"></div>\n            <script>\n\t\t\t\tconst handleError = (err) => {\n\t\t\t\t\tconst root = document.getElementById(\"root\");\n\t\t\t\t\troot.innerHTML = '<div style=\"color: red;\"><h4>Runtime Error</h4>' + err + '</div>';\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t};\n\t\t\t\twindow.addEventListener(\"error\", (event) => {\n\t\t\t\t\tconsole.log(event)\n\t\t\t\t});\n                window.addEventListener(\"message\", (event) => {\n                    try {\n                        eval(event.data);\n                    } catch (err) {\n                        handleError(err);\n                    }\n                }, false)\n            </script>\n        </body>\n    </html>\n`;\n\nconst Preview = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const iframe = useRef();\n  useEffect(() => {\n    // update srcdoc of iframe to default state to prevent user from deleting html structure by any chance\n    iframe.current.srcdoc = html; // slightly delay to allow update of srcdoc first\n\n    setTimeout(() => {\n      // pass bundled code into iframe element via a ref\n      iframe.current.contentWindow.postMessage(code, \"*\");\n    }, 50);\n  }, [code]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preview-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      title: \"code preview\",\n      ref: iframe,\n      sandbox: \"allow-scripts\",\n      srcDoc: html\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Preview, \"GAFleWBZ6O+8Op7dBuDH6PzOglQ=\");\n\n_c = Preview;\nexport default Preview;\n\nvar _c;\n\n$RefreshReg$(_c, \"Preview\");","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/src/components/preview.tsx"],"names":["useRef","useEffect","html","Preview","code","iframe","current","srcdoc","setTimeout","contentWindow","postMessage"],"mappings":";;;AAAA,OAAO,eAAP;AACA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;;AAMA;AACA;AACA,MAAMC,IAAI,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBA;;AA0BA,MAAMC,OAAO,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAAEC,IAAAA;AAAF,GAA2B;AAC3C,QAAMC,MAAM,GAAGL,MAAM,EAArB;AAEAC,EAAAA,SAAS,CACR,MAAM;AACL;AACAI,IAAAA,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBL,IAAxB,CAFK,CAGL;;AACAM,IAAAA,UAAU,CAAC,MAAM;AAChB;AACAH,MAAAA,MAAM,CAACC,OAAP,CAAeG,aAAf,CAA6BC,WAA7B,CAAyCN,IAAzC,EAA+C,GAA/C;AACA,KAHS,EAGP,EAHO,CAAV;AAIA,GATO,EAUR,CAAEA,IAAF,CAVQ,CAAT;AAaA,sBACC;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA,2BACC;AAAQ,MAAA,KAAK,EAAC,cAAd;AAA6B,MAAA,GAAG,EAAEC,MAAlC;AAA0C,MAAA,OAAO,EAAC,eAAlD;AAAkE,MAAA,MAAM,EAAEH;AAA1E;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CArBD;;GAAMC,O;;KAAAA,O;AAuBN,eAAeA,OAAf","sourcesContent":["import \"./preview.css\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\ninterface PreviewProps {\r\n\tcode: string;\r\n}\r\n\r\n// setup event listener for message and eval the message (bundled code)\r\n// embed this as inner html in iframe using srcdoc attribute\r\nconst html = `\r\n    <html>\r\n        <head></head>\r\n        <body>\r\n            <div id=\"root\"></div>\r\n            <script>\r\n\t\t\t\tconst handleError = (err) => {\r\n\t\t\t\t\tconst root = document.getElementById(\"root\");\r\n\t\t\t\t\troot.innerHTML = '<div style=\"color: red;\"><h4>Runtime Error</h4>' + err + '</div>';\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t};\r\n\t\t\t\twindow.addEventListener(\"error\", (event) => {\r\n\t\t\t\t\tconsole.log(event)\r\n\t\t\t\t});\r\n                window.addEventListener(\"message\", (event) => {\r\n                    try {\r\n                        eval(event.data);\r\n                    } catch (err) {\r\n                        handleError(err);\r\n                    }\r\n                }, false)\r\n            </script>\r\n        </body>\r\n    </html>\r\n`;\r\n\r\nconst Preview = ({ code }: PreviewProps) => {\r\n\tconst iframe = useRef<any>();\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// update srcdoc of iframe to default state to prevent user from deleting html structure by any chance\r\n\t\t\tiframe.current.srcdoc = html;\r\n\t\t\t// slightly delay to allow update of srcdoc first\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\t// pass bundled code into iframe element via a ref\r\n\t\t\t\tiframe.current.contentWindow.postMessage(code, \"*\");\r\n\t\t\t}, 50);\r\n\t\t},\r\n\t\t[ code ]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"preview-wrapper\">\r\n\t\t\t<iframe title=\"code preview\" ref={iframe} sandbox=\"allow-scripts\" srcDoc={html} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Preview;\r\n"]},"metadata":{},"sourceType":"module"}