{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryzen\\\\Desktop\\\\jbook\\\\src\\\\components\\\\code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport CodeEditor from \"./code-editor\";\nimport Preview from \"./preview\";\nimport Resizable from \"./resizable\";\nimport { useActions } from \"../hooks/use-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = _ref => {\n  _s();\n\n  let {\n    cell\n  } = _ref;\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [cell.id, cell.content]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"calc(100% - 10px)\",\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: code,\n        bundleError: err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CodeCell, \"Rv8ML1jBCtVkFbErd2+ahB3eD4I=\", false, function () {\n  return [useActions];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","useActions","CodeCell","cell","updateCell","createBundle","timer","setTimeout","id","content","clearTimeout","height","display","flexDirection","value","code","err"],"mappings":";;;AAAA,SAAmBA,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;;;AAOA,MAAMC,QAAQ,GAAG,QAA6B;AAAA;;AAAA,MAA5B;AAAEC,IAAAA;AAAF,GAA4B;AAC7C,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BJ,UAAU,EAA/C;AAEAJ,EAAAA,SAAS,CACR,MAAM;AACL,UAAMS,KAAK,GAAGC,UAAU,CAAC,YAAY;AACpCF,MAAAA,YAAY,CAACF,IAAI,CAACK,EAAN,EAAUL,IAAI,CAACM,OAAf,CAAZ;AACA,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAM;AACZC,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACA,KAFD;AAGA,GATO,EAUR,CAAEH,IAAI,CAACK,EAAP,EAAWL,IAAI,CAACM,OAAhB,CAVQ,CAAT;AAaA,sBACC,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACC;AAAK,MAAA,KAAK,EAAE;AAAEE,QAAAA,MAAM,EAAE,mBAAV;AAA+BC,QAAAA,OAAO,EAAE,MAAxC;AAAgDC,QAAAA,aAAa,EAAE;AAA/D,OAAZ;AAAA,8BACC,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACC,QAAC,UAAD;AAAY,UAAA,YAAY,EAAEV,IAAI,CAACM,OAA/B;AAAwC,UAAA,QAAQ,EAAGK,KAAD,IAAWV,UAAU,CAACD,IAAI,CAACK,EAAN,EAAUM,KAAV;AAAvE;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cADD,eAIC,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEC,IAAf;AAAqB,QAAA,WAAW,EAAEC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAUA,CA1BD;;GAAMd,Q;UACgCD,U;;;KADhCC,Q;AA4BN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport CodeEditor from \"./code-editor\";\r\nimport Preview from \"./preview\";\r\nimport bundle from \"../bundler\";\r\nimport Resizable from \"./resizable\";\r\nimport { Cell } from \"../state\";\r\nimport { useActions } from \"../hooks/use-actions\";\r\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\r\n\r\ninterface CodeCellProps {\r\n\tcell: Cell;\r\n}\r\n\r\nconst CodeCell = ({ cell }: CodeCellProps) => {\r\n\tconst { updateCell, createBundle } = useActions();\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconst timer = setTimeout(async () => {\r\n\t\t\t\tcreateBundle(cell.id, cell.content);\r\n\t\t\t}, 750);\r\n\r\n\t\t\treturn () => {\r\n\t\t\t\tclearTimeout(timer);\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ cell.id, cell.content ]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<Resizable direction=\"vertical\">\r\n\t\t\t<div style={{ height: \"calc(100% - 10px)\", display: \"flex\", flexDirection: \"row\" }}>\r\n\t\t\t\t<Resizable direction=\"horizontal\">\r\n\t\t\t\t\t<CodeEditor initialValue={cell.content} onChange={(value) => updateCell(cell.id, value)} />\r\n\t\t\t\t</Resizable>\r\n\t\t\t\t<Preview code={code} bundleError={err} />\r\n\t\t\t</div>\r\n\t\t</Resizable>\r\n\t);\r\n};\r\n\r\nexport default CodeCell;\r\n"]},"metadata":{},"sourceType":"module"}