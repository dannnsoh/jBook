{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTypedSelector } from \"./use-typed-selector\";\nexport const useCumulativeCode = cellId => {\n  _s();\n\n  return useTypedSelector(state => {\n    // destructure data and order array from state\n    const {\n      data,\n      order\n    } = state.cells; // map over each cell id from order array and return corresponding cell from data array\n\n    const orderedCells = order.map(id => data[id]);\n    const showFunc = `\n        import _React from \"react\";\n        import _ReactDOM from \"react-dom\";\n        var show = (value) => {\n            const root = document.getElementById(\"root\");\n            if (typeof value === \"object\") {\n                if (value.$$typeof && value.props) {\n                    _ReactDOM.render(value, root)\n                } else {\n                    root.innerHTML = JSON.stringify(value)\n                }\n            } else {\n                root.innerHTML = value;\n            }\n        };\n        `;\n    const showFuncNoOp = \"var show = () => {}\";\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === \"code\") {\n        // if the id is the current cell's id, which is the cell that the user wants to execute, then push the usuable show function to cumulativeCode\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoOp);\n        }\n\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cellId) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  }).join(\"\\n\");\n};\n\n_s(useCumulativeCode, \"4E8l+eUOHjvoqwxLSolHjmdFz+I=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/packages/local-client/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","data","order","cells","orderedCells","map","id","showFunc","showFuncNoOp","cumulativeCode","c","type","push","content","join"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,sBAAjC;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAoB;AAAA;;AACpD,SAAOF,gBAAgB,CAAEG,KAAD,IAAW;AAClC;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,KAA9B,CAFkC,CAGlC;;AACA,UAAMC,YAAY,GAAGF,KAAK,CAACG,GAAN,CAAWC,EAAD,IAAQL,IAAI,CAACK,EAAD,CAAtB,CAArB;AACA,UAAMC,QAAQ,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAfE;AAgBA,UAAMC,YAAY,GAAG,qBAArB;AACA,UAAMC,cAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAT,IAAcN,YAAd,EAA4B;AAC3B,UAAIM,CAAC,CAACC,IAAF,KAAW,MAAf,EAAuB;AACtB;AACA,YAAID,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACpBU,UAAAA,cAAc,CAACG,IAAf,CAAoBL,QAApB;AACA,SAFD,MAEO;AACNE,UAAAA,cAAc,CAACG,IAAf,CAAoBJ,YAApB;AACA;;AACDC,QAAAA,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB;AACA;;AACD,UAAIH,CAAC,CAACJ,EAAF,KAASP,MAAb,EAAqB;AACpB;AACA;AACD;;AACD,WAAOU,cAAP;AACA,GAtCsB,CAAhB,CAsCJK,IAtCI,CAsCC,IAtCD,CAAP;AAuCA,CAxCM;;GAAMhB,iB;UACLD,gB","sourcesContent":["import { useTypedSelector } from \"./use-typed-selector\";\r\n\r\nexport const useCumulativeCode = (cellId: string) => {\r\n\treturn useTypedSelector((state) => {\r\n\t\t// destructure data and order array from state\r\n\t\tconst { data, order } = state.cells;\r\n\t\t// map over each cell id from order array and return corresponding cell from data array\r\n\t\tconst orderedCells = order.map((id) => data[id]);\r\n\t\tconst showFunc = `\r\n        import _React from \"react\";\r\n        import _ReactDOM from \"react-dom\";\r\n        var show = (value) => {\r\n            const root = document.getElementById(\"root\");\r\n            if (typeof value === \"object\") {\r\n                if (value.$$typeof && value.props) {\r\n                    _ReactDOM.render(value, root)\r\n                } else {\r\n                    root.innerHTML = JSON.stringify(value)\r\n                }\r\n            } else {\r\n                root.innerHTML = value;\r\n            }\r\n        };\r\n        `;\r\n\t\tconst showFuncNoOp = \"var show = () => {}\";\r\n\t\tconst cumulativeCode = [];\r\n\t\tfor (let c of orderedCells) {\r\n\t\t\tif (c.type === \"code\") {\r\n\t\t\t\t// if the id is the current cell's id, which is the cell that the user wants to execute, then push the usuable show function to cumulativeCode\r\n\t\t\t\tif (c.id === cellId) {\r\n\t\t\t\t\tcumulativeCode.push(showFunc);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcumulativeCode.push(showFuncNoOp);\r\n\t\t\t\t}\r\n\t\t\t\tcumulativeCode.push(c.content);\r\n\t\t\t}\r\n\t\t\tif (c.id === cellId) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn cumulativeCode;\r\n\t}).join(\"\\n\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}