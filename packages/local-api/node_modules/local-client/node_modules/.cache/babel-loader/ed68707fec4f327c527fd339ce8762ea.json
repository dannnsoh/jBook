{"ast":null,"code":"import React, { useContext, useEffect, useMemo } from 'react';\nimport { rehype } from 'rehype'; // @ts-ignore\n\nimport rehypePrism from '@mapbox/rehype-prism';\nimport { EditorContext } from '../../Context';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Markdown(props) {\n  var {\n    prefixCls\n  } = props;\n  var {\n    markdown = '',\n    highlightEnable,\n    dispatch\n  } = useContext(EditorContext);\n  var preRef = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({\n        textareaPre: preRef.current\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  function html2Escape(sHtml) {\n    return sHtml.replace(/```(.*)\\s+([\\s\\S]*?)(\\s.+)?```/g, str => {\n      return str.replace(/[<>&\"]/g, c => ({\n        '<': '&lt;',\n        '>': '&gt;',\n        '&': '&amp;',\n        '\"': '&quot;'\n      })[c]);\n    }).replace(/[<>&\"]/g, c => ({\n      '<': '&lt;',\n      '>': '&gt;',\n      '&': '&amp;',\n      '\"': '&quot;'\n    })[c]);\n  }\n\n  return useMemo(() => {\n    if (!highlightEnable || !markdown) {\n      return /*#__PURE__*/_jsx(\"pre\", {\n        children: markdown || '',\n        ref: preRef,\n        className: prefixCls + \"-text-pre wmde-markdown-color\"\n      });\n    }\n\n    var str = rehype().data('settings', {\n      fragment: true\n    }).use(rehypePrism, {\n      ignoreMissing: true\n    }).processSync(\"<pre class=\\\"language-markdown \" + prefixCls + \"-text-pre wmde-markdown-color\\\"><code class=\\\"language-markdown\\\">\" + html2Escape(markdown) + \"</code></pre>\");\n    return /*#__PURE__*/React.createElement('div', {\n      className: 'wmde-markdown-color',\n      dangerouslySetInnerHTML: {\n        __html: str.value\n      }\n    });\n  }, [highlightEnable, markdown, preRef, prefixCls]);\n}","map":{"version":3,"sources":["../../../src/components/TextArea/Markdown.tsx"],"names":["prefixCls","markdown","dispatch","useContext","preRef","React","useEffect","textareaPre","current","str","c","useMemo","fragment","ignoreMissing","html2Escape","className","dangerouslySetInnerHTML","__html","value"],"mappings":"AAAA,OAAA,KAAA,IAAA,UAAA,EAAA,SAAA,EAAA,OAAA,QAAA,OAAA;AACA,SAAA,MAAA,QAAA,QAAA,C,CACA;;AACA,OAAA,WAAA,MAAA,sBAAA;AAEA,SAAA,aAAA,QAAA,eAAA;;AAIA,eAAe,SAAA,QAAA,CAAA,KAAA,EAAwC;AACrD,MAAM;AAAEA,IAAAA;AAAF,MAAN,KAAA;AACA,MAAM;AAAEC,IAAAA,QAAQ,GAAV,EAAA;AAAA,IAAA,eAAA;AAAkCC,IAAAA;AAAlC,MAA+CC,UAAU,CAA/D,aAA+D,CAA/D;AACA,MAAMC,MAAM,GAAA,aAAGC,KAAK,CAApB,SAAeA,EAAf;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIF,MAAM,CAANA,OAAAA,IAAJ,QAAA,EAAgC;AAC9BF,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,WAAW,EAAEH,MAAM,CAACI;AAAtB,OAAD,CAARN;AAFY,KAAA,CAId;;AAJO,GAAA,EAATI,EAAS,CAATA;;AAMA,WAAA,WAAA,CAAA,KAAA,EAAoC;AAClC,WAAO,KAAK,CAAL,OAAA,CAAA,iCAAA,EACwCG,GAAD,IAAiB;AAC3D,aAAO,GAAG,CAAH,OAAA,CAAA,SAAA,EAEJC,CAAD,IAAgB,CAAC;AAAE,aAAF,MAAA;AAAe,aAAf,MAAA;AAA4B,aAA5B,OAAA;AAA0C,aAAK;AAA/C,OAAD,EAFlB,CAEkB,CAFX,CAAP;AAFG,KAAA,EAAA,OAAA,CAAA,SAAA,EASFA,CAAD,IAAgB,CAAC;AAAE,WAAF,MAAA;AAAe,WAAf,MAAA;AAA4B,WAA5B,OAAA;AAA0C,WAAK;AAA/C,KAAD,EATpB,CASoB,CATb,CAAP;AAWD;;AAED,SAAOC,OAAO,CAAC,MAAM;AACnB,QAAI,CAAA,eAAA,IAAoB,CAAxB,QAAA,EAAmC;AACjC,aAAA,aAAO,IAAA,CAAA,KAAA,EAAA;AAAK,QAAA,QAAQ,EAAEV,QAAQ,IAAvB,EAAA;AAA+B,QAAA,GAAG,EAAlC,MAAA;AAA4C,QAAA,SAAS,EAAKD,SAAL,GAAA;AAArD,OAAA,CAAP;AACD;;AACD,QAAMS,GAAG,GAAG,MAAM,GAAN,IAAA,CAAA,UAAA,EACQ;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KADR,EAAA,GAAA,CAAA,WAAA,EAEQ;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAFR,EAAA,WAAA,CAAA,oCAAA,SAAA,GAAA,oEAAA,GAIoGC,WAAW,CAJ/G,QAI+G,CAJ/G,GAAZ,eAAY,CAAZ;AAQA,WAAA,aAAO,KAAK,CAAL,aAAA,CAAA,KAAA,EAA2B;AAChCC,MAAAA,SAAS,EADuB,qBAAA;AAEhCC,MAAAA,uBAAuB,EAAE;AAAEC,QAAAA,MAAM,EAAER,GAAG,CAACS;AAAd;AAFO,KAA3B,CAAP;AAZY,GAAA,EAgBX,CAAA,eAAA,EAAA,QAAA,EAAA,MAAA,EAhBH,SAgBG,CAhBW,CAAd;AAiBD","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport { rehype } from 'rehype';\n// @ts-ignore\nimport rehypePrism from '@mapbox/rehype-prism';\nimport { IProps } from '../../Editor';\nimport { EditorContext } from '../../Context';\n\nexport interface MarkdownProps extends IProps, React.HTMLAttributes<HTMLPreElement> {}\n\nexport default function Markdown(props: MarkdownProps) {\n  const { prefixCls } = props;\n  const { markdown = '', highlightEnable, dispatch } = useContext(EditorContext);\n  const preRef = React.createRef<HTMLPreElement>();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({ textareaPre: preRef.current });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  function html2Escape(sHtml: string) {\n    return sHtml\n      .replace(/```(.*)\\s+([\\s\\S]*?)(\\s.+)?```/g, (str: string) => {\n        return str.replace(\n          /[<>&\"]/g,\n          (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n        );\n      })\n      .replace(\n        /[<>&\"]/g,\n        (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n      );\n  }\n\n  return useMemo(() => {\n    if (!highlightEnable || !markdown) {\n      return <pre children={markdown || ''} ref={preRef} className={`${prefixCls}-text-pre wmde-markdown-color`} />;\n    }\n    const str = rehype()\n      .data('settings', { fragment: true })\n      .use(rehypePrism, { ignoreMissing: true })\n      .processSync(\n        `<pre class=\"language-markdown ${prefixCls}-text-pre wmde-markdown-color\"><code class=\"language-markdown\">${html2Escape(\n          markdown,\n        )}</code></pre>`,\n      );\n    return React.createElement('div', {\n      className: 'wmde-markdown-color',\n      dangerouslySetInnerHTML: { __html: str.value as string },\n    });\n  }, [highlightEnable, markdown, preRef, prefixCls]);\n}\n"]},"metadata":{},"sourceType":"module"}