{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryzen\\\\Desktop\\\\jbook\\\\packages\\\\local-client\\\\src\\\\components\\\\cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./cell-list.css\";\nimport { useEffect } from \"react\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport AddCell from \"./add-cell\";\nimport CellListItem from \"./cell-list-item\";\nimport { useActions } from \"../hooks/use-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellList = () => {\n  _s();\n\n  // extract state.cells.order and .data from store\n  // map over each cell id in order array and return the corresponding cells from data\n  // results in cells variable = an array of cells in order\n  const cells = useTypedSelector(_ref => {\n    let {\n      cells: {\n        order,\n        data\n      }\n    } = _ref;\n    return order.map(id => data[id]);\n  });\n  const {\n    fetchCells,\n    saveCells\n  } = useActions();\n  useEffect(() => {\n    fetchCells();\n  }, []);\n  useEffect(() => {\n    saveCells();\n  }, []);\n  const renderedCells = cells.map(cell => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CellListItem, {\n        cell: cell\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(AddCell, {\n        previousCellId: cell.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this)]\n    }, cell.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 4\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cell-list\",\n    children: [/*#__PURE__*/_jsxDEV(AddCell, {\n      forceVisible: cells.length === 0,\n      previousCellId: null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), renderedCells]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n};\n\n_s(CellList, \"0VmEwIaPhlcbGqIPAcmmtFyi0uw=\", false, function () {\n  return [useTypedSelector, useActions];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["C:/Users/Ryzen/Desktop/jbook/packages/local-client/src/components/cell-list.tsx"],"names":["useEffect","useTypedSelector","AddCell","CellListItem","useActions","CellList","cells","order","data","map","id","fetchCells","saveCells","renderedCells","cell","length"],"mappings":";;;AAAA,OAAO,iBAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB;AACA;AACA;AAEA,QAAMC,KAAK,GAAGL,gBAAgB,CAAC;AAAA,QAAC;AAAEK,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAT,KAAD;AAAA,WAC9BD,KAAK,CAACE,GAAN,CAAUC,EAAE,IAAIF,IAAI,CAACE,EAAD,CAApB,CAD8B;AAAA,GAAD,CAA9B;AAGA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4BR,UAAU,EAA5C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACfW,IAAAA,UAAU;AACV,GAFQ,EAEN,EAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACfY,IAAAA,SAAS;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMC,aAAa,GAAGP,KAAK,CAACG,GAAN,CAAUK,IAAI,IAAI;AACvC,wBACC;AAAA,8BACC,QAAC,YAAD;AAAc,QAAA,IAAI,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,OAAD;AAAS,QAAA,cAAc,EAAEA,IAAI,CAACJ;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA,OAAUI,IAAI,CAACJ,EAAf;AAAA;AAAA;AAAA;AAAA,YADD;AAMA,GAPqB,CAAtB;AASA,sBACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACC,QAAC,OAAD;AAAS,MAAA,YAAY,EAAEJ,KAAK,CAACS,MAAN,KAAiB,CAAxC;AAA2C,MAAA,cAAc,EAAE;AAA3D;AAAA;AAAA;AAAA;AAAA,YADD,EAEEF,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAMA,CAjCD;;GAAMR,Q;UAKSJ,gB,EAGoBG,U;;;KAR7BC,Q;AAmCN,eAAeA,QAAf","sourcesContent":["import \"./cell-list.css\";\r\nimport { useEffect } from \"react\";\r\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\r\nimport AddCell from \"./add-cell\";\r\nimport CellListItem from \"./cell-list-item\";\r\nimport { useActions } from \"../hooks/use-actions\";\r\n\r\nconst CellList = () => {\r\n\t// extract state.cells.order and .data from store\r\n\t// map over each cell id in order array and return the corresponding cells from data\r\n\t// results in cells variable = an array of cells in order\r\n\r\n\tconst cells = useTypedSelector(({ cells: { order, data } }) =>\r\n\t\torder.map(id => data[id])\r\n\t);\r\n\tconst { fetchCells, saveCells } = useActions();\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchCells();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tsaveCells();\r\n\t}, []);\r\n\r\n\tconst renderedCells = cells.map(cell => {\r\n\t\treturn (\r\n\t\t\t<div key={cell.id}>\r\n\t\t\t\t<CellListItem cell={cell} />\r\n\t\t\t\t<AddCell previousCellId={cell.id} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"cell-list\">\r\n\t\t\t<AddCell forceVisible={cells.length === 0} previousCellId={null} />\r\n\t\t\t{renderedCells}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CellList;\r\n"]},"metadata":{},"sourceType":"module"}